// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/morph-l2/go-ethereum"
	"github.com/morph-l2/go-ethereum/accounts/abi"
	"github.com/morph-l2/go-ethereum/accounts/abi/bind"
	"github.com/morph-l2/go-ethereum/common"
	"github.com/morph-l2/go-ethereum/core/types"
	"github.com/morph-l2/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// L1StakingMetaData contains all meta data concerning the L1Staking contract.
var L1StakingMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_messenger\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldChallengeDeposit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newChallengeDeposit\",\"type\":\"uint256\"}],\"name\":\"ChallengeDepositUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldGasLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newGasLimit\",\"type\":\"uint256\"}],\"name\":\"GasLimitAddStakerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldGasLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newGasLimit\",\"type\":\"uint256\"}],\"name\":\"GasLimitRemoveStakersUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"tmKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"blsKey\",\"type\":\"bytes\"}],\"name\":\"Registered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPercentage\",\"type\":\"uint256\"}],\"name\":\"RewardPercentageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SlashRemainingClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"stakers\",\"type\":\"address[]\"}],\"name\":\"Slashed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"stakers\",\"type\":\"address[]\"}],\"name\":\"StakersRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldStakingValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newStakingValue\",\"type\":\"uint256\"}],\"name\":\"StakingValueUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"add\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"remove\",\"type\":\"address[]\"}],\"name\":\"WhitelistUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockHeight\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MESSENGER\",\"outputs\":[{\"internalType\":\"contractICrossDomainMessenger\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OTHER_STAKING\",\"outputs\":[{\"internalType\":\"contractStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"blsPubkey\",\"type\":\"bytes\"}],\"name\":\"blsKeys\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exist\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengeDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"claimSlashRemaining\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"claimWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cleanStakerStore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deleteList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddr\",\"type\":\"address\"}],\"name\":\"deleteableHeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasLimitAddStaker\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasLimitRemoveStakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveStakers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"getStakerBitmap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bitmap\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakers\",\"outputs\":[{\"internalType\":\"address[255]\",\"name\":\"\",\"type\":\"address[255]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_stakers\",\"type\":\"address[]\"}],\"name\":\"getStakersBitmap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bitmap\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bitmap\",\"type\":\"uint256\"}],\"name\":\"getStakersFromBitmap\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"stakerAddrs\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rollupContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakingValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_challengeDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasLimitAdd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasLimitRemove\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isActiveStaker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isStaker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isStakerInDeleteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messenger\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tmKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"blsKey\",\"type\":\"bytes\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_stakers\",\"type\":\"address[]\"}],\"name\":\"removeStaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddr\",\"type\":\"address\"}],\"name\":\"removedList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"removed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sequencersBitmap\",\"type\":\"uint256\"}],\"name\":\"slash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slashRemaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddr\",\"type\":\"address\"}],\"name\":\"stakerIndexes\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakerSet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddr\",\"type\":\"address\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tmKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"blsKey\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tmPubkey\",\"type\":\"bytes32\"}],\"name\":\"tmKeys\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exist\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_challengeDeposit\",\"type\":\"uint256\"}],\"name\":\"updateChallengeDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gasLimitAdd\",\"type\":\"uint256\"}],\"name\":\"updateGasLimitAddStaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gasLimitRemove\",\"type\":\"uint256\"}],\"name\":\"updateGasLimitRemoveStakers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardPercentage\",\"type\":\"uint256\"}],\"name\":\"updateRewardPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingValue\",\"type\":\"uint256\"}],\"name\":\"updateStakingValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"add\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"remove\",\"type\":\"address[]\"}],\"name\":\"updateWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"verifySignature\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddr\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"inWhitelist\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalLockBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"withdrawals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60c060405234801562000010575f80fd5b5060405162003f0238038062003f02833981016040819052620000339162000127565b6001600160a01b03811660805273530000000000000000000000000000000000001560a0526200006262000069565b5062000156565b5f54610100900460ff1615620000d55760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b5f5460ff9081161462000125575f805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b5f6020828403121562000138575f80fd5b81516001600160a01b03811681146200014f575f80fd5b9392505050565b60805160a051613d676200019b5f395f818161066f015281816129a70152612c3401525f81816104470152818161070c015281816129780152612c050152613d675ff3fe608060405260043610610303575f3560e01c80638142951a11610191578063ae81de53116100dc578063d51c90a911610087578063e2a6ad5f11610062578063e2a6ad5f1461092d578063f2fde38b1461094c578063f4fe7fef1461096b575f80fd5b8063d51c90a9146108a0578063dd4785f5146108b5578063df155033146108f6575f80fd5b8063c7cd469a116100b7578063c7cd469a14610843578063cde4cd1114610862578063d096c3c614610881575f80fd5b8063ae81de53146107ef578063affed0e01461080e578063bfa02ba914610824575f80fd5b80639b19251a1161013c578063a3066aab11610117578063a3066aab1461079c578063a4f209b0146107bb578063ab8c53dc146107da575f80fd5b80639b19251a1461072e5780639d48f4171461075c5780639fb82db914610788575f80fd5b80638da5cb5b1161016c5780638da5cb5b146106b05780639168ae72146106cd578063927ede2d146106fb575f80fd5b80638142951a1461063f578063831cfb581461065e5780638a565ac314610691575f80fd5b806343352d61116102515780636f1e8533116101fc578063797adbde116101d7578063797adbde146105b95780637a4e87c3146105d85780637a9262a214610613575f80fd5b80636f1e853314610560578063715018a61461057f57806374fe27b714610593575f80fd5b806352d472eb1161022c57806352d472eb146104fd5780636801579114610512578063692c565b14610531575f80fd5b806343352d61146104a857806345bc4d10146104c95780634d64903a146104e8575f80fd5b806335928991116102b15780633ccfd60b1161028c5780633ccfd60b1461046b5780633ee2a1f91461047f57806341de239b14610493575f80fd5b806335928991146103dc5780633a9bbede146103fb5780633cb747bf14610439575f80fd5b80632e407a6f116102e15780632e407a6f1461035a578063303afb9e14610386578063320ff860146103bd575f80fd5b80630d13fd7b146103075780632108db35146103305780632a28e5a314610345575b5f80fd5b348015610312575f80fd5b5061031d6101a65481565b6040519081526020015b60405180910390f35b34801561033b575f80fd5b5061031d609c5481565b6103586103533660046134c8565b61098a565b005b348015610365575f80fd5b5061031d610374366004613522565b6101a16020525f908152604090205481565b348015610391575f80fd5b506103a56103a0366004613542565b610d85565b6040516001600160a01b039091168152602001610327565b3480156103c8575f80fd5b506103586103d7366004613559565b610da4565b3480156103e7575f80fd5b506103586103f6366004613542565b6110bf565b348015610406575f80fd5b50610429610415366004613522565b609f6020525f908152604090205460ff1681565b6040519015158152602001610327565b348015610444575f80fd5b507f00000000000000000000000000000000000000000000000000000000000000006103a5565b348015610476575f80fd5b5061035861116c565b34801561048a575f80fd5b50610358611338565b34801561049e575f80fd5b5061031d60995481565b3480156104b3575f80fd5b506104bc61134a565b6040516103279190613601565b3480156104d4575f80fd5b5061031d6104e3366004613542565b611390565b3480156104f3575f80fd5b5061031d60985481565b348015610508575f80fd5b5061031d609a5481565b34801561051d575f80fd5b5061042961052c366004613522565b6116c9565b34801561053c575f80fd5b5061042961054b366004613542565b6101a46020525f908152604090205460ff1681565b34801561056b575f80fd5b5061042961057a366004613522565b611764565b34801561058a575f80fd5b506103586117dd565b34801561059e575f80fd5b506104296105ad366004613683565b60019695505050505050565b3480156105c4575f80fd5b506103a56105d3366004613542565b6117ee565b3480156105e3575f80fd5b506104296105f2366004613729565b80516020818301810180516101a38252928201919093012091525460ff1681565b34801561061e575f80fd5b5061031d61062d366004613522565b6101a56020525f908152604090205481565b34801561064a575f80fd5b50610358610659366004613763565b611817565b348015610669575f80fd5b506103a57f000000000000000000000000000000000000000000000000000000000000000081565b34801561069c575f80fd5b506103586106ab366004613542565b611cd9565b3480156106bb575f80fd5b506033546001600160a01b03166103a5565b3480156106d8575f80fd5b506106ec6106e7366004613522565b611d7c565b604051610327939291906137fe565b348015610706575f80fd5b506103a57f000000000000000000000000000000000000000000000000000000000000000081565b348015610739575f80fd5b50610429610748366004613522565b609e6020525f908152604090205460ff1681565b348015610767575f80fd5b5061077b610776366004613542565b611e2f565b6040516103279190613871565b348015610793575f80fd5b5061077b611f4c565b3480156107a7575f80fd5b506103586107b6366004613522565b6120fa565b3480156107c6575f80fd5b506103586107d5366004613542565b61222a565b3480156107e5575f80fd5b5061031d609d5481565b3480156107fa575f80fd5b50610358610809366004613542565b6122da565b348015610819575f80fd5b5061031d6101a75481565b34801561082f575f80fd5b506097546103a5906001600160a01b031681565b34801561084e575f80fd5b5061035861085d366004613883565b61237d565b34801561086d575f80fd5b5061035861087c366004613522565b61251e565b34801561088c575f80fd5b5061031d61089b366004613522565b61258c565b3480156108ab575f80fd5b5061031d609b5481565b3480156108c0575f80fd5b506108e46108cf366004613522565b61019f6020525f908152604090205460ff1681565b60405160ff9091168152602001610327565b348015610901575f80fd5b50610429610910366004613522565b6001600160a01b03165f9081526101a16020526040902054151590565b348015610938575f80fd5b5061031d6109473660046138ea565b612606565b348015610957575f80fd5b50610358610966366004613522565b612738565b348015610976575f80fd5b50610358610985366004613542565b6127c5565b335f818152609e602052604090205460ff166109ed5760405162461bcd60e51b815260206004820152601060248201527f6e6f7420696e2077686974656c6973740000000000000000000000000000000060448201526064015b60405180910390fd5b335f9081526101a260205260409020546001600160a01b031615610a535760405162461bcd60e51b815260206004820152601260248201527f616c72656164792072656769737465726564000000000000000000000000000060448201526064016109e4565b8215801590610a7157505f8381526101a4602052604090205460ff16155b610abd5760405162461bcd60e51b815260206004820152601960248201527f696e76616c69642074656e6465726d696e74207075626b65790000000000000060448201526064016109e4565b8151610100148015610af057506101a382604051610adb9190613929565b9081526040519081900360200190205460ff16155b610b3c5760405162461bcd60e51b815260206004820152601260248201527f696e76616c696420626c73207075626b6579000000000000000000000000000060448201526064016109e4565b6098543414610b8d5760405162461bcd60e51b815260206004820152601560248201527f696e76616c6964207374616b696e672076616c7565000000000000000000000060448201526064016109e4565b6040518060600160405280610b9f3390565b6001600160a01b03908116825260208083018790526040928301869052335f9081526101a28252839020845181547fffffffffffffffffffffffff00000000000000000000000000000000000000001693169290921782558301516001820155908201516002820190610c1290826139e0565b50905050610c25610c203390565b612868565b60016101a383604051610c389190613929565b90815260408051918290036020908101909220805493151560ff199485161790555f8681526101a49092529020805490911660011790557fb9c7babb56df9f2da4a30811a6c778e4e68af88b72712d56cf62c5516e20e199610c973390565b8484604051610ca8939291906137fe565b60405180910390a1335f9081526101a26020908152604091829020825160608101845281546001600160a01b03168152600182015492810192909252600281018054610d809484019190610cfb90613944565b80601f0160208091040260200160405190810160405280929190818152602001828054610d2790613944565b8015610d725780601f10610d4957610100808354040283529160200191610d72565b820191905f5260205f20905b815481529060010190602001808311610d5557829003601f168201915b505050505081525050612976565b505050565b60a08160ff8110610d94575f80fd5b01546001600160a01b0316905081565b610dac612ab7565b5f5b815181101561107b57610dd9828281518110610dcc57610dcc613ade565b60200260200101516116c9565b610e4b5760405162461bcd60e51b815260206004820152602160248201527f6f6e6c7920616374697665207374616b65722063616e2062652072656d6f766560448201527f640000000000000000000000000000000000000000000000000000000000000060648201526084016109e4565b6101a55f838381518110610e6157610e61613ade565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020015f20545f14610ed75760405162461bcd60e51b815260206004820152600b60248201527f7769746864726177696e6700000000000000000000000000000000000000000060448201526064016109e4565b609954610ee49043613b38565b6101a55f848481518110610efa57610efa613ade565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020015f2081905550610f47828281518110610f3a57610f3a613ade565b6020026020010151612b11565b818181518110610f5957610f59613ade565b60200260200101516001600160a01b03167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d56101a55f858581518110610fa157610fa1613ade565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020015f2054604051610fd891815260200190565b60405180910390a2609e5f838381518110610ff557610ff5613ade565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020015f205f6101000a81549060ff02191690556001609f5f84848151811061104257611042613ade565b6020908102919091018101516001600160a01b031682528101919091526040015f20805460ff1916911515919091179055600101610dae565b507f3f446646c03e618be8238a586960d6d625f35c653cdca1ef59609993e8ed2c84816040516110ab9190613871565b60405180910390a16110bc81612c03565b50565b6110c7612ab7565b5f811180156110d957506101a6548114155b6111255760405162461bcd60e51b815260206004820152601f60248201527f696e76616c6964206368616c6c656e6765206465706f7369742076616c75650060448201526064016109e4565b6101a680549082905560408051828152602081018490527f36f971a40478225aeb80cfbf5e80306e8cb76d3bf7d56fdc5e490945cddb7d5591015b60405180910390a15050565b611175336116c9565b6111c15760405162461bcd60e51b815260206004820152601260248201527f6f6e6c7920616374697665207374616b6572000000000000000000000000000060448201526064016109e4565b335f9081526101a560205260409020541561121e5760405162461bcd60e51b815260206004820152600b60248201527f7769746864726177696e6700000000000000000000000000000000000000000060448201526064016109e4565b60995461122b9043613b38565b335f8181526101a5602052604090209190915561124790612b11565b335f8181526101a560209081526040918290205491519182527f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5910160405180910390a2335f908152609e60209081526040808320805460ff19908116909155609f83528184208054909116600190811790915581518181528083019092529091828101908036833701905050905033815f815181106112e9576112e9613ade565b60200260200101906001600160a01b031690816001600160a01b0316815250507f3f446646c03e618be8238a586960d6d625f35c653cdca1ef59609993e8ed2c84816040516110ab9190613871565b611340612ab7565b611348612d00565b565b611352613395565b60408051611fe08101918290529060a09060ff9082845b81546001600160a01b03168152600190910190602001808311611369575050505050905090565b6097545f906001600160a01b0316336001600160a01b0316146113f55760405162461bcd60e51b815260206004820152601460248201527f6f6e6c7920726f6c6c757020636f6e747261637400000000000000000000000060448201526064016109e4565b6113fd61301a565b5f61140783611e2f565b90505f805b82518110156115ec575f6001600160a01b031683828151811061143157611431613ade565b60200260200101516001600160a01b031603156115e4575f6101a55f85848151811061145f5761145f613ade565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020015f205411156114e2576101a55f8483815181106114a3576114a3613ade565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020015f205f9055609854826114db9190613b38565b91506115e4565b61151c8382815181106114f7576114f7613ade565b60200260200101516001600160a01b03165f9081526101a16020526040902054151590565b6115e45760985461152d9083613b38565b9150611544838281518110610f3a57610f3a613ade565b609e5f84838151811061155957611559613ade565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020015f205f6101000a81549060ff02191690556001609f5f8584815181106115a6576115a6613ade565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020015f205f6101000a81548160ff0219169083151502179055505b60010161140c565b505f6064609a54836115fe9190613b4b565b6116089190613b62565b90506116148183613b9a565b609d5f8282546116249190613b38565b909155505060975461163f906001600160a01b031682613073565b7f654f4a61849f1b3ad10abb283d27f02d5fece7b820acc5a3b874713b58748b5a8360405161166e9190613871565b60405180910390a17f3f446646c03e618be8238a586960d6d625f35c653cdca1ef59609993e8ed2c84836040516116a59190613871565b60405180910390a16116b683612c03565b925050506116c46001606555565b919050565b6001600160a01b0381165f90815261019f602052604081205460ff1681036116f257505f919050565b6001600160a01b0382165f81815261019f602052604090205460a09061171d9060019060ff16613bad565b60ff1660ff811061173057611730613ade565b01546001600160a01b031614801561175e57506001600160a01b0382165f9081526101a16020526040902054155b92915050565b6001600160a01b0381165f90815261019f602052604081205460ff16810361178d57505f919050565b6001600160a01b0382165f81815261019f602052604090205460a0906117b89060019060ff16613bad565b60ff1660ff81106117cb576117cb613ade565b01546001600160a01b03161492915050565b6117e5612ab7565b6113485f613123565b6101a081815481106117fe575f80fd5b5f918252602090912001546001600160a01b0316905081565b5f54610100900460ff161580801561183557505f54600160ff909116105b8061184e5750303b15801561184e57505f5460ff166001145b6118c05760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016109e4565b5f805460ff1916600117905580156118fe575f80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b6001600160a01b0388166119545760405162461bcd60e51b815260206004820152601760248201527f696e76616c696420726f6c6c757020636f6e747261637400000000000000000060448201526064016109e4565b5f87116119a35760405162461bcd60e51b815260206004820152601560248201527f696e76616c6964207374616b696e672076616c7565000000000000000000000060448201526064016109e4565b5f86116119f25760405162461bcd60e51b815260206004820152601f60248201527f696e76616c6964206368616c6c656e6765206465706f7369742076616c75650060448201526064016109e4565b5f8511611a415760405162461bcd60e51b815260206004820152601e60248201527f696e76616c6964207769746864726177616c206c6f636b20626c6f636b73000060448201526064016109e4565b5f8311611a905760405162461bcd60e51b815260206004820152601c60248201527f696e76616c696420676173206c696d697420616464207374616b65720000000060448201526064016109e4565b5f8211611adf5760405162461bcd60e51b815260206004820181905260248201527f696e76616c696420676173206c696d69742072656d6f7665207374616b65727360448201526064016109e4565b5f84118015611aef575060648411155b611b605760405162461bcd60e51b8152602060048201526024808201527f696e76616c6964206368616c6c656e676572207265776172642070657263656e60448201527f746167650000000000000000000000000000000000000000000000000000000060648201526084016109e4565b611b6861318c565b611b70613210565b609780547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038a16179055609a84905560988790556101a68690556099859055609b839055609c829055604080515f8152602081018590527f0ef80fb82bf5439b8591744c0fde771f5d93dce7a7970b1e9b7828cdc3970e9c910160405180910390a1604080515f8152602081018490527fdd4b37d1f14888147fe4be2cfaedcbf148fd07ececc856d0433241b8b6e4a7f7910160405180910390a1604080515f8152602081018690527fa46de936426e045703b2d34a292a19fde92b329018db8e0da750033876b655ba910160405180910390a18015611ccf575f80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b611ce1612ab7565b5f81118015611cf25750609c548114155b611d3e5760405162461bcd60e51b815260206004820152601560248201527f696e76616c6964206e657720676173206c696d6974000000000000000000000060448201526064016109e4565b609c80549082905560408051828152602081018490527fdd4b37d1f14888147fe4be2cfaedcbf148fd07ececc856d0433241b8b6e4a7f79101611160565b6101a26020525f90815260409020805460018201546002830180546001600160a01b03909316939192611dae90613944565b80601f0160208091040260200160405190810160405280929190818152602001828054611dda90613944565b8015611e255780601f10611dfc57610100808354040283529160200191611e25565b820191905f5260205f20905b815481529060010190602001808311611e0857829003601f168201915b5050505050905083565b6060600182901c5f5b8115611e5f57611e49816001613b38565b9050611e56600183613b9a565b82169150611e38565b8067ffffffffffffffff811115611e7857611e786133fe565b604051908082528060200260200182016040528015611ea1578160200160208202803683370190505b5092505f60015b60ff8160ff1611611f4357600160ff82161b861615611f315760a0611ece600183613bad565b60ff1660ff8110611ee157611ee1613ade565b015485516001600160a01b0390911690869084908110611f0357611f03613ade565b6001600160a01b0390921660209283029190910190910152611f26826001613b38565b915082821015611f43575b80611f3b81613bc6565b915050611ea8565b50505050919050565b6040805160ff80825261200082019092526060915f91829160208201611fe0803683370190505090505f5b60ff81101561201b575f60a08260ff8110611f9457611f94613ade565b01546001600160a01b031614801590611fdc57506101a15f60a08360ff8110611fbf57611fbf613ade565b01546001600160a01b0316815260208101919091526040015f2054155b156120135782611feb81613be4565b935050600182828151811061200257612002613ade565b911515602092830291909101909101525b600101611f77565b505f8267ffffffffffffffff811115612036576120366133fe565b60405190808252806020026020018201604052801561205f578160200160208202803683370190505b5090505f805b60ff8110156120f05783818151811061208057612080613ade565b6020026020010151156120e85760a08160ff81106120a0576120a0613ade565b015483516001600160a01b03909116908490849081106120c2576120c2613ade565b6001600160a01b0390921660209283029190910190910152816120e481613be4565b9250505b600101612065565b5090949350505050565b61210261301a565b335f9081526101a5602052604090205461215e5760405162461bcd60e51b815260206004820152601460248201527f7769746864726177616c206e6f7420657869737400000000000000000000000060448201526064016109e4565b335f9081526101a560205260409020544310156121bd5760405162461bcd60e51b815260206004820152601160248201527f7769746864726177616c206c6f636b656400000000000000000000000000000060448201526064016109e4565b335f9081526101a560205260408120556121d5612d00565b604080516001600160a01b0383168152905133917f89309c9b2aeaffbdce717113df9427298b20448c05919bf889e05f8c3094254b919081900360200190a261222081609854613073565b6110bc6001606555565b612232612ab7565b5f81118015612242575060648111155b80156122505750609a548114155b61229c5760405162461bcd60e51b815260206004820152601960248201527f696e76616c6964207265776172642070657263656e746167650000000000000060448201526064016109e4565b609a80549082905560408051828152602081018490527fa46de936426e045703b2d34a292a19fde92b329018db8e0da750033876b655ba9101611160565b6122e2612ab7565b5f811180156122f35750609b548114155b61233f5760405162461bcd60e51b815260206004820152601560248201527f696e76616c6964206e657720676173206c696d6974000000000000000000000060448201526064016109e4565b609b80549082905560408051828152602081018490527f0ef80fb82bf5439b8591744c0fde771f5d93dce7a7970b1e9b7828cdc3970e9c9101611160565b612385612ab7565b5f5b8381101561247d57609f5f8686848181106123a4576123a4613ade565b90506020020160208101906123b99190613522565b6001600160a01b0316815260208101919091526040015f205460ff16156124225760405162461bcd60e51b815260206004820152600f60248201527f696e2072656d6f766564206c697374000000000000000000000000000000000060448201526064016109e4565b6001609e5f87878581811061243957612439613ade565b905060200201602081019061244e9190613522565b6001600160a01b0316815260208101919091526040015f20805460ff1916911515919091179055600101612387565b505f5b818110156124da57609e5f84848481811061249d5761249d613ade565b90506020020160208101906124b29190613522565b6001600160a01b0316815260208101919091526040015f20805460ff19169055600101612480565b507fe375867e538b40218c1b3db2ccceaf875eb073e38b510449e6088c1539ac8622848484846040516125109493929190613c55565b60405180910390a150505050565b612526612ab7565b61252e61301a565b609d5461253b8282613073565b5f609d55604080516001600160a01b0384168152602081018390527fa1fefb6c5328a92a416e321ed50997303fe7135fd88c28b0592b21ce42b5cdd9910160405180910390a1506110bc6001606555565b5f61259682611764565b6125e25760405162461bcd60e51b815260206004820152600e60248201527f696e76616c6964207374616b657200000000000000000000000000000000000060448201526064016109e4565b506001600160a01b03165f90815261019f6020526040902054600160ff9091161b90565b5f60ff8211156126585760405162461bcd60e51b815260206004820152601c60248201527f7374616b657273206c656e677468206f7574206f6620626f756e64730000000060448201526064016109e4565b5f5b828110156127315761268c84848381811061267757612677613ade565b905060200201602081019061057a9190613522565b6126d85760405162461bcd60e51b815260206004820152600e60248201527f696e76616c6964207374616b657200000000000000000000000000000000000060448201526064016109e4565b61019f5f8585848181106126ee576126ee613ade565b90506020020160208101906127039190613522565b6001600160a01b0316815260208101919091526040015f2054600160ff90911681901b92909217910161265a565b5092915050565b612740612ab7565b6001600160a01b0381166127bc5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016109e4565b6110bc81613123565b6127cd612ab7565b5f811180156127de57506098548114155b61282a5760405162461bcd60e51b815260206004820152601560248201527f696e76616c6964207374616b696e672076616c7565000000000000000000000060448201526064016109e4565b609880549082905560408051828152602081018490527f91e3ed304d49776a78bbe0df6bf7156f5433763621e5e728a3c2adfe7de743689101611160565b5f5b60ff8160ff16101561292d575f60a060ff80841690811061288d5761288d613ade565b01546001600160a01b031603612925578160a08260ff1660ff81106128b4576128b4613ade565b0180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03929092169190911790556128f6816001613c86565b6001600160a01b03929092165f90815261019f60205260409020805460ff191660ff9093169290921790915550565b60010161286a565b5060405162461bcd60e51b815260206004820152600960248201527f736c6f742066756c6c000000000000000000000000000000000000000000000060448201526064016109e4565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b2267a7b7f00000000000000000000000000000000000000000000000000000000000000005f6101a754856040516024016129dd929190613c9f565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f7046529b00000000000000000000000000000000000000000000000000000000179052609b5490517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b168152612a739493929190600401613cdd565b5f604051808303815f87803b158015612a8a575f80fd5b505af1158015612a9c573d5f803e3d5ffd5b505050506101a7546001612ab09190613b38565b6101a75550565b6033546001600160a01b031633146113485760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109e4565b6001600160a01b0381165f9081526101a1602052604090205415612b775760405162461bcd60e51b815260206004820152601560248201527f616c726561647920696e2064656c6574654c697374000000000000000000000060448201526064016109e4565b6101a080546001810182555f919091527f7980fe0f714a613298681d64b7b8ffa7b148338dd52429f307d72798d5c317c40180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038316179055609954612be79043613b38565b6001600160a01b039091165f9081526101a16020526040902055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b2267a7b7f00000000000000000000000000000000000000000000000000000000000000005f6101a75485604051602401612c6a929190613d15565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fcce6cf9f00000000000000000000000000000000000000000000000000000000179052609c5490517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b168152612a739493929190600401613cdd565b5f5b6101a0548110156110bc575f6001600160a01b03166101a08281548110612d2b57612d2b613ade565b5f918252602090912001546001600160a01b031603612e66576101a15f6101a08381548110612d5c57612d5c613ade565b5f9182526020808320909101546001600160a01b031683528201929092526040018120556101a08054612d9190600190613b9a565b81548110612da157612da1613ade565b5f918252602090912001546101a080546001600160a01b039092169183908110612dcd57612dcd613ade565b905f5260205f20015f6101000a8154816001600160a01b0302191690836001600160a01b031602179055506101a0805480612e0a57612e0a613d2d565b5f8281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055019055612d02565b436101a15f6101a08481548110612e7f57612e7f613ade565b5f9182526020808320909101546001600160a01b03168352820192909252604001902054116130085760a0600161019f5f6101a08581548110612ec457612ec4613ade565b5f9182526020808320909101546001600160a01b03168352820192909252604001902054612ef5919060ff16613bad565b60ff1660ff8110612f0857612f08613ade565b0180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690556101a0805461019f915f9184908110612f4a57612f4a613ade565b5f9182526020808320909101546001600160a01b031683528201929092526040018120805460ff191690556101a080546101a292919084908110612f9057612f90613ade565b5f9182526020808320909101546001600160a01b03168352820192909252604001812080547fffffffffffffffffffffffff00000000000000000000000000000000000000001681556001810182905590612fee60028301826133b4565b50506101a15f6101a08381548110612d5c57612d5c613ade565b8061301281613be4565b915050612d02565b60026065540361306c5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016109e4565b6002606555565b8015613118575f826001600160a01b0316826040515f6040518083038185875af1925050503d805f81146130c2576040519150601f19603f3d011682016040523d82523d5f602084013e6130c7565b606091505b5050905080610d805760405162461bcd60e51b815260206004820152601b60248201527f526f6c6c75703a20455448207472616e73666572206661696c6564000000000060448201526064016109e4565b5050565b6001606555565b603380546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b5f54610100900460ff166132085760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016109e4565b611348613294565b5f54610100900460ff1661328c5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016109e4565b611348613319565b5f54610100900460ff166133105760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016109e4565b61134833613123565b5f54610100900460ff1661311c5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016109e4565b60405180611fe0016040528060ff906020820280368337509192915050565b5080546133c090613944565b5f825580601f106133cf575050565b601f0160209004905f5260205f20908101906110bc91905b808211156133fa575f81556001016133e7565b5090565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b604051601f8201601f1916810167ffffffffffffffff81118282101715613454576134546133fe565b604052919050565b5f82601f83011261346b575f80fd5b813567ffffffffffffffff811115613485576134856133fe565b6134986020601f19601f8401160161342b565b8181528460208386010111156134ac575f80fd5b816020850160208301375f918101602001919091529392505050565b5f80604083850312156134d9575f80fd5b82359150602083013567ffffffffffffffff8111156134f6575f80fd5b6135028582860161345c565b9150509250929050565b80356001600160a01b03811681146116c4575f80fd5b5f60208284031215613532575f80fd5b61353b8261350c565b9392505050565b5f60208284031215613552575f80fd5b5035919050565b5f602080838503121561356a575f80fd5b823567ffffffffffffffff80821115613581575f80fd5b818501915085601f830112613594575f80fd5b8135818111156135a6576135a66133fe565b8060051b91506135b784830161342b565b81815291830184019184810190888411156135d0575f80fd5b938501935b838510156135f5576135e68561350c565b825293850193908501906135d5565b98975050505050505050565b611fe0810181835f5b60ff8110156136325781516001600160a01b031683526020928301929091019060010161360a565b50505092915050565b5f8083601f84011261364b575f80fd5b50813567ffffffffffffffff811115613662575f80fd5b6020830191508360208260051b850101111561367c575f80fd5b9250929050565b5f805f805f8060808789031215613698575f80fd5b86359550602087013567ffffffffffffffff808211156136b6575f80fd5b6136c28a838b0161363b565b90975095506040890135945060608901359150808211156136e1575f80fd5b818901915089601f8301126136f4575f80fd5b813581811115613702575f80fd5b8a6020828501011115613713575f80fd5b6020830194508093505050509295509295509295565b5f60208284031215613739575f80fd5b813567ffffffffffffffff81111561374f575f80fd5b61375b8482850161345c565b949350505050565b5f805f805f805f60e0888a031215613779575f80fd5b6137828861350c565b9960208901359950604089013598606081013598506080810135975060a0810135965060c00135945092505050565b5f5b838110156137cb5781810151838201526020016137b3565b50505f910152565b5f81518084526137ea8160208601602086016137b1565b601f01601f19169290920160200192915050565b6001600160a01b0384168152826020820152606060408201525f61382560608301846137d3565b95945050505050565b5f815180845260208085019450602084015f5b838110156138665781516001600160a01b031687529582019590820190600101613841565b509495945050505050565b602081525f61353b602083018461382e565b5f805f8060408587031215613896575f80fd5b843567ffffffffffffffff808211156138ad575f80fd5b6138b98883890161363b565b909650945060208701359150808211156138d1575f80fd5b506138de8782880161363b565b95989497509550505050565b5f80602083850312156138fb575f80fd5b823567ffffffffffffffff811115613911575f80fd5b61391d8582860161363b565b90969095509350505050565b5f825161393a8184602087016137b1565b9190910192915050565b600181811c9082168061395857607f821691505b60208210810361398f577f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b50919050565b601f821115610d8057805f5260205f20601f840160051c810160208510156139ba5750805b601f840160051c820191505b818110156139d9575f81556001016139c6565b5050505050565b815167ffffffffffffffff8111156139fa576139fa6133fe565b613a0e81613a088454613944565b84613995565b602080601f831160018114613a60575f8415613a2a5750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b178555613ad6565b5f85815260208120601f198616915b82811015613a8e57888601518255948401946001909101908401613a6f565b5085821015613aca57878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b505060018460011b0185555b505050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b8082018082111561175e5761175e613b0b565b808202811582820484141761175e5761175e613b0b565b5f82613b95577f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b500490565b8181038181111561175e5761175e613b0b565b60ff828116828216039081111561175e5761175e613b0b565b5f60ff821660ff8103613bdb57613bdb613b0b565b60010192915050565b5f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613c1457613c14613b0b565b5060010190565b8183525f60208085019450825f5b85811015613866576001600160a01b03613c428361350c565b1687529582019590820190600101613c29565b604081525f613c68604083018688613c1b565b8281036020840152613c7b818587613c1b565b979650505050505050565b60ff818116838216019081111561175e5761175e613b0b565b828152604060208201526001600160a01b038251166040820152602082015160608201525f60408301516060608084015261382560a08401826137d3565b6001600160a01b0385168152836020820152608060408201525f613d0460808301856137d3565b905082606083015295945050505050565b828152604060208201525f61375b604083018461382e565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603160045260245ffdfea164736f6c6343000818000a",
}

// L1StakingABI is the input ABI used to generate the binding from.
// Deprecated: Use L1StakingMetaData.ABI instead.
var L1StakingABI = L1StakingMetaData.ABI

// L1StakingBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use L1StakingMetaData.Bin instead.
var L1StakingBin = L1StakingMetaData.Bin

// DeployL1Staking deploys a new Ethereum contract, binding an instance of L1Staking to it.
func DeployL1Staking(auth *bind.TransactOpts, backend bind.ContractBackend, _messenger common.Address) (common.Address, *types.Transaction, *L1Staking, error) {
	parsed, err := L1StakingMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(L1StakingBin), backend, _messenger)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &L1Staking{L1StakingCaller: L1StakingCaller{contract: contract}, L1StakingTransactor: L1StakingTransactor{contract: contract}, L1StakingFilterer: L1StakingFilterer{contract: contract}}, nil
}

// L1Staking is an auto generated Go binding around an Ethereum contract.
type L1Staking struct {
	L1StakingCaller     // Read-only binding to the contract
	L1StakingTransactor // Write-only binding to the contract
	L1StakingFilterer   // Log filterer for contract events
}

// L1StakingCaller is an auto generated read-only Go binding around an Ethereum contract.
type L1StakingCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// L1StakingTransactor is an auto generated write-only Go binding around an Ethereum contract.
type L1StakingTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// L1StakingFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type L1StakingFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// L1StakingSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type L1StakingSession struct {
	Contract     *L1Staking        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// L1StakingCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type L1StakingCallerSession struct {
	Contract *L1StakingCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// L1StakingTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type L1StakingTransactorSession struct {
	Contract     *L1StakingTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// L1StakingRaw is an auto generated low-level Go binding around an Ethereum contract.
type L1StakingRaw struct {
	Contract *L1Staking // Generic contract binding to access the raw methods on
}

// L1StakingCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type L1StakingCallerRaw struct {
	Contract *L1StakingCaller // Generic read-only contract binding to access the raw methods on
}

// L1StakingTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type L1StakingTransactorRaw struct {
	Contract *L1StakingTransactor // Generic write-only contract binding to access the raw methods on
}

// NewL1Staking creates a new instance of L1Staking, bound to a specific deployed contract.
func NewL1Staking(address common.Address, backend bind.ContractBackend) (*L1Staking, error) {
	contract, err := bindL1Staking(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &L1Staking{L1StakingCaller: L1StakingCaller{contract: contract}, L1StakingTransactor: L1StakingTransactor{contract: contract}, L1StakingFilterer: L1StakingFilterer{contract: contract}}, nil
}

// NewL1StakingCaller creates a new read-only instance of L1Staking, bound to a specific deployed contract.
func NewL1StakingCaller(address common.Address, caller bind.ContractCaller) (*L1StakingCaller, error) {
	contract, err := bindL1Staking(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &L1StakingCaller{contract: contract}, nil
}

// NewL1StakingTransactor creates a new write-only instance of L1Staking, bound to a specific deployed contract.
func NewL1StakingTransactor(address common.Address, transactor bind.ContractTransactor) (*L1StakingTransactor, error) {
	contract, err := bindL1Staking(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &L1StakingTransactor{contract: contract}, nil
}

// NewL1StakingFilterer creates a new log filterer instance of L1Staking, bound to a specific deployed contract.
func NewL1StakingFilterer(address common.Address, filterer bind.ContractFilterer) (*L1StakingFilterer, error) {
	contract, err := bindL1Staking(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &L1StakingFilterer{contract: contract}, nil
}

// bindL1Staking binds a generic wrapper to an already deployed contract.
func bindL1Staking(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := L1StakingMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_L1Staking *L1StakingRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _L1Staking.Contract.L1StakingCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_L1Staking *L1StakingRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _L1Staking.Contract.L1StakingTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_L1Staking *L1StakingRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _L1Staking.Contract.L1StakingTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_L1Staking *L1StakingCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _L1Staking.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_L1Staking *L1StakingTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _L1Staking.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_L1Staking *L1StakingTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _L1Staking.Contract.contract.Transact(opts, method, params...)
}

// MESSENGER is a free data retrieval call binding the contract method 0x927ede2d.
//
// Solidity: function MESSENGER() view returns(address)
func (_L1Staking *L1StakingCaller) MESSENGER(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "MESSENGER")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// MESSENGER is a free data retrieval call binding the contract method 0x927ede2d.
//
// Solidity: function MESSENGER() view returns(address)
func (_L1Staking *L1StakingSession) MESSENGER() (common.Address, error) {
	return _L1Staking.Contract.MESSENGER(&_L1Staking.CallOpts)
}

// MESSENGER is a free data retrieval call binding the contract method 0x927ede2d.
//
// Solidity: function MESSENGER() view returns(address)
func (_L1Staking *L1StakingCallerSession) MESSENGER() (common.Address, error) {
	return _L1Staking.Contract.MESSENGER(&_L1Staking.CallOpts)
}

// OTHERSTAKING is a free data retrieval call binding the contract method 0x831cfb58.
//
// Solidity: function OTHER_STAKING() view returns(address)
func (_L1Staking *L1StakingCaller) OTHERSTAKING(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "OTHER_STAKING")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OTHERSTAKING is a free data retrieval call binding the contract method 0x831cfb58.
//
// Solidity: function OTHER_STAKING() view returns(address)
func (_L1Staking *L1StakingSession) OTHERSTAKING() (common.Address, error) {
	return _L1Staking.Contract.OTHERSTAKING(&_L1Staking.CallOpts)
}

// OTHERSTAKING is a free data retrieval call binding the contract method 0x831cfb58.
//
// Solidity: function OTHER_STAKING() view returns(address)
func (_L1Staking *L1StakingCallerSession) OTHERSTAKING() (common.Address, error) {
	return _L1Staking.Contract.OTHERSTAKING(&_L1Staking.CallOpts)
}

// BlsKeys is a free data retrieval call binding the contract method 0x7a4e87c3.
//
// Solidity: function blsKeys(bytes blsPubkey) view returns(bool exist)
func (_L1Staking *L1StakingCaller) BlsKeys(opts *bind.CallOpts, blsPubkey []byte) (bool, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "blsKeys", blsPubkey)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// BlsKeys is a free data retrieval call binding the contract method 0x7a4e87c3.
//
// Solidity: function blsKeys(bytes blsPubkey) view returns(bool exist)
func (_L1Staking *L1StakingSession) BlsKeys(blsPubkey []byte) (bool, error) {
	return _L1Staking.Contract.BlsKeys(&_L1Staking.CallOpts, blsPubkey)
}

// BlsKeys is a free data retrieval call binding the contract method 0x7a4e87c3.
//
// Solidity: function blsKeys(bytes blsPubkey) view returns(bool exist)
func (_L1Staking *L1StakingCallerSession) BlsKeys(blsPubkey []byte) (bool, error) {
	return _L1Staking.Contract.BlsKeys(&_L1Staking.CallOpts, blsPubkey)
}

// ChallengeDeposit is a free data retrieval call binding the contract method 0x0d13fd7b.
//
// Solidity: function challengeDeposit() view returns(uint256)
func (_L1Staking *L1StakingCaller) ChallengeDeposit(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "challengeDeposit")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ChallengeDeposit is a free data retrieval call binding the contract method 0x0d13fd7b.
//
// Solidity: function challengeDeposit() view returns(uint256)
func (_L1Staking *L1StakingSession) ChallengeDeposit() (*big.Int, error) {
	return _L1Staking.Contract.ChallengeDeposit(&_L1Staking.CallOpts)
}

// ChallengeDeposit is a free data retrieval call binding the contract method 0x0d13fd7b.
//
// Solidity: function challengeDeposit() view returns(uint256)
func (_L1Staking *L1StakingCallerSession) ChallengeDeposit() (*big.Int, error) {
	return _L1Staking.Contract.ChallengeDeposit(&_L1Staking.CallOpts)
}

// DeleteList is a free data retrieval call binding the contract method 0x797adbde.
//
// Solidity: function deleteList(uint256 ) view returns(address)
func (_L1Staking *L1StakingCaller) DeleteList(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "deleteList", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// DeleteList is a free data retrieval call binding the contract method 0x797adbde.
//
// Solidity: function deleteList(uint256 ) view returns(address)
func (_L1Staking *L1StakingSession) DeleteList(arg0 *big.Int) (common.Address, error) {
	return _L1Staking.Contract.DeleteList(&_L1Staking.CallOpts, arg0)
}

// DeleteList is a free data retrieval call binding the contract method 0x797adbde.
//
// Solidity: function deleteList(uint256 ) view returns(address)
func (_L1Staking *L1StakingCallerSession) DeleteList(arg0 *big.Int) (common.Address, error) {
	return _L1Staking.Contract.DeleteList(&_L1Staking.CallOpts, arg0)
}

// DeleteableHeight is a free data retrieval call binding the contract method 0x2e407a6f.
//
// Solidity: function deleteableHeight(address stakerAddr) view returns(uint256 height)
func (_L1Staking *L1StakingCaller) DeleteableHeight(opts *bind.CallOpts, stakerAddr common.Address) (*big.Int, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "deleteableHeight", stakerAddr)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DeleteableHeight is a free data retrieval call binding the contract method 0x2e407a6f.
//
// Solidity: function deleteableHeight(address stakerAddr) view returns(uint256 height)
func (_L1Staking *L1StakingSession) DeleteableHeight(stakerAddr common.Address) (*big.Int, error) {
	return _L1Staking.Contract.DeleteableHeight(&_L1Staking.CallOpts, stakerAddr)
}

// DeleteableHeight is a free data retrieval call binding the contract method 0x2e407a6f.
//
// Solidity: function deleteableHeight(address stakerAddr) view returns(uint256 height)
func (_L1Staking *L1StakingCallerSession) DeleteableHeight(stakerAddr common.Address) (*big.Int, error) {
	return _L1Staking.Contract.DeleteableHeight(&_L1Staking.CallOpts, stakerAddr)
}

// GasLimitAddStaker is a free data retrieval call binding the contract method 0xd51c90a9.
//
// Solidity: function gasLimitAddStaker() view returns(uint256)
func (_L1Staking *L1StakingCaller) GasLimitAddStaker(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "gasLimitAddStaker")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GasLimitAddStaker is a free data retrieval call binding the contract method 0xd51c90a9.
//
// Solidity: function gasLimitAddStaker() view returns(uint256)
func (_L1Staking *L1StakingSession) GasLimitAddStaker() (*big.Int, error) {
	return _L1Staking.Contract.GasLimitAddStaker(&_L1Staking.CallOpts)
}

// GasLimitAddStaker is a free data retrieval call binding the contract method 0xd51c90a9.
//
// Solidity: function gasLimitAddStaker() view returns(uint256)
func (_L1Staking *L1StakingCallerSession) GasLimitAddStaker() (*big.Int, error) {
	return _L1Staking.Contract.GasLimitAddStaker(&_L1Staking.CallOpts)
}

// GasLimitRemoveStakers is a free data retrieval call binding the contract method 0x2108db35.
//
// Solidity: function gasLimitRemoveStakers() view returns(uint256)
func (_L1Staking *L1StakingCaller) GasLimitRemoveStakers(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "gasLimitRemoveStakers")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GasLimitRemoveStakers is a free data retrieval call binding the contract method 0x2108db35.
//
// Solidity: function gasLimitRemoveStakers() view returns(uint256)
func (_L1Staking *L1StakingSession) GasLimitRemoveStakers() (*big.Int, error) {
	return _L1Staking.Contract.GasLimitRemoveStakers(&_L1Staking.CallOpts)
}

// GasLimitRemoveStakers is a free data retrieval call binding the contract method 0x2108db35.
//
// Solidity: function gasLimitRemoveStakers() view returns(uint256)
func (_L1Staking *L1StakingCallerSession) GasLimitRemoveStakers() (*big.Int, error) {
	return _L1Staking.Contract.GasLimitRemoveStakers(&_L1Staking.CallOpts)
}

// GetActiveStakers is a free data retrieval call binding the contract method 0x9fb82db9.
//
// Solidity: function getActiveStakers() view returns(address[])
func (_L1Staking *L1StakingCaller) GetActiveStakers(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "getActiveStakers")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetActiveStakers is a free data retrieval call binding the contract method 0x9fb82db9.
//
// Solidity: function getActiveStakers() view returns(address[])
func (_L1Staking *L1StakingSession) GetActiveStakers() ([]common.Address, error) {
	return _L1Staking.Contract.GetActiveStakers(&_L1Staking.CallOpts)
}

// GetActiveStakers is a free data retrieval call binding the contract method 0x9fb82db9.
//
// Solidity: function getActiveStakers() view returns(address[])
func (_L1Staking *L1StakingCallerSession) GetActiveStakers() ([]common.Address, error) {
	return _L1Staking.Contract.GetActiveStakers(&_L1Staking.CallOpts)
}

// GetStakerBitmap is a free data retrieval call binding the contract method 0xd096c3c6.
//
// Solidity: function getStakerBitmap(address _staker) view returns(uint256 bitmap)
func (_L1Staking *L1StakingCaller) GetStakerBitmap(opts *bind.CallOpts, _staker common.Address) (*big.Int, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "getStakerBitmap", _staker)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetStakerBitmap is a free data retrieval call binding the contract method 0xd096c3c6.
//
// Solidity: function getStakerBitmap(address _staker) view returns(uint256 bitmap)
func (_L1Staking *L1StakingSession) GetStakerBitmap(_staker common.Address) (*big.Int, error) {
	return _L1Staking.Contract.GetStakerBitmap(&_L1Staking.CallOpts, _staker)
}

// GetStakerBitmap is a free data retrieval call binding the contract method 0xd096c3c6.
//
// Solidity: function getStakerBitmap(address _staker) view returns(uint256 bitmap)
func (_L1Staking *L1StakingCallerSession) GetStakerBitmap(_staker common.Address) (*big.Int, error) {
	return _L1Staking.Contract.GetStakerBitmap(&_L1Staking.CallOpts, _staker)
}

// GetStakers is a free data retrieval call binding the contract method 0x43352d61.
//
// Solidity: function getStakers() view returns(address[255])
func (_L1Staking *L1StakingCaller) GetStakers(opts *bind.CallOpts) ([255]common.Address, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "getStakers")

	if err != nil {
		return *new([255]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([255]common.Address)).(*[255]common.Address)

	return out0, err

}

// GetStakers is a free data retrieval call binding the contract method 0x43352d61.
//
// Solidity: function getStakers() view returns(address[255])
func (_L1Staking *L1StakingSession) GetStakers() ([255]common.Address, error) {
	return _L1Staking.Contract.GetStakers(&_L1Staking.CallOpts)
}

// GetStakers is a free data retrieval call binding the contract method 0x43352d61.
//
// Solidity: function getStakers() view returns(address[255])
func (_L1Staking *L1StakingCallerSession) GetStakers() ([255]common.Address, error) {
	return _L1Staking.Contract.GetStakers(&_L1Staking.CallOpts)
}

// GetStakersBitmap is a free data retrieval call binding the contract method 0xe2a6ad5f.
//
// Solidity: function getStakersBitmap(address[] _stakers) view returns(uint256 bitmap)
func (_L1Staking *L1StakingCaller) GetStakersBitmap(opts *bind.CallOpts, _stakers []common.Address) (*big.Int, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "getStakersBitmap", _stakers)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetStakersBitmap is a free data retrieval call binding the contract method 0xe2a6ad5f.
//
// Solidity: function getStakersBitmap(address[] _stakers) view returns(uint256 bitmap)
func (_L1Staking *L1StakingSession) GetStakersBitmap(_stakers []common.Address) (*big.Int, error) {
	return _L1Staking.Contract.GetStakersBitmap(&_L1Staking.CallOpts, _stakers)
}

// GetStakersBitmap is a free data retrieval call binding the contract method 0xe2a6ad5f.
//
// Solidity: function getStakersBitmap(address[] _stakers) view returns(uint256 bitmap)
func (_L1Staking *L1StakingCallerSession) GetStakersBitmap(_stakers []common.Address) (*big.Int, error) {
	return _L1Staking.Contract.GetStakersBitmap(&_L1Staking.CallOpts, _stakers)
}

// GetStakersFromBitmap is a free data retrieval call binding the contract method 0x9d48f417.
//
// Solidity: function getStakersFromBitmap(uint256 bitmap) view returns(address[] stakerAddrs)
func (_L1Staking *L1StakingCaller) GetStakersFromBitmap(opts *bind.CallOpts, bitmap *big.Int) ([]common.Address, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "getStakersFromBitmap", bitmap)

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetStakersFromBitmap is a free data retrieval call binding the contract method 0x9d48f417.
//
// Solidity: function getStakersFromBitmap(uint256 bitmap) view returns(address[] stakerAddrs)
func (_L1Staking *L1StakingSession) GetStakersFromBitmap(bitmap *big.Int) ([]common.Address, error) {
	return _L1Staking.Contract.GetStakersFromBitmap(&_L1Staking.CallOpts, bitmap)
}

// GetStakersFromBitmap is a free data retrieval call binding the contract method 0x9d48f417.
//
// Solidity: function getStakersFromBitmap(uint256 bitmap) view returns(address[] stakerAddrs)
func (_L1Staking *L1StakingCallerSession) GetStakersFromBitmap(bitmap *big.Int) ([]common.Address, error) {
	return _L1Staking.Contract.GetStakersFromBitmap(&_L1Staking.CallOpts, bitmap)
}

// IsActiveStaker is a free data retrieval call binding the contract method 0x68015791.
//
// Solidity: function isActiveStaker(address addr) view returns(bool)
func (_L1Staking *L1StakingCaller) IsActiveStaker(opts *bind.CallOpts, addr common.Address) (bool, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "isActiveStaker", addr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsActiveStaker is a free data retrieval call binding the contract method 0x68015791.
//
// Solidity: function isActiveStaker(address addr) view returns(bool)
func (_L1Staking *L1StakingSession) IsActiveStaker(addr common.Address) (bool, error) {
	return _L1Staking.Contract.IsActiveStaker(&_L1Staking.CallOpts, addr)
}

// IsActiveStaker is a free data retrieval call binding the contract method 0x68015791.
//
// Solidity: function isActiveStaker(address addr) view returns(bool)
func (_L1Staking *L1StakingCallerSession) IsActiveStaker(addr common.Address) (bool, error) {
	return _L1Staking.Contract.IsActiveStaker(&_L1Staking.CallOpts, addr)
}

// IsStaker is a free data retrieval call binding the contract method 0x6f1e8533.
//
// Solidity: function isStaker(address addr) view returns(bool)
func (_L1Staking *L1StakingCaller) IsStaker(opts *bind.CallOpts, addr common.Address) (bool, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "isStaker", addr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsStaker is a free data retrieval call binding the contract method 0x6f1e8533.
//
// Solidity: function isStaker(address addr) view returns(bool)
func (_L1Staking *L1StakingSession) IsStaker(addr common.Address) (bool, error) {
	return _L1Staking.Contract.IsStaker(&_L1Staking.CallOpts, addr)
}

// IsStaker is a free data retrieval call binding the contract method 0x6f1e8533.
//
// Solidity: function isStaker(address addr) view returns(bool)
func (_L1Staking *L1StakingCallerSession) IsStaker(addr common.Address) (bool, error) {
	return _L1Staking.Contract.IsStaker(&_L1Staking.CallOpts, addr)
}

// IsStakerInDeleteList is a free data retrieval call binding the contract method 0xdf155033.
//
// Solidity: function isStakerInDeleteList(address addr) view returns(bool)
func (_L1Staking *L1StakingCaller) IsStakerInDeleteList(opts *bind.CallOpts, addr common.Address) (bool, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "isStakerInDeleteList", addr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsStakerInDeleteList is a free data retrieval call binding the contract method 0xdf155033.
//
// Solidity: function isStakerInDeleteList(address addr) view returns(bool)
func (_L1Staking *L1StakingSession) IsStakerInDeleteList(addr common.Address) (bool, error) {
	return _L1Staking.Contract.IsStakerInDeleteList(&_L1Staking.CallOpts, addr)
}

// IsStakerInDeleteList is a free data retrieval call binding the contract method 0xdf155033.
//
// Solidity: function isStakerInDeleteList(address addr) view returns(bool)
func (_L1Staking *L1StakingCallerSession) IsStakerInDeleteList(addr common.Address) (bool, error) {
	return _L1Staking.Contract.IsStakerInDeleteList(&_L1Staking.CallOpts, addr)
}

// Messenger is a free data retrieval call binding the contract method 0x3cb747bf.
//
// Solidity: function messenger() view returns(address)
func (_L1Staking *L1StakingCaller) Messenger(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "messenger")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Messenger is a free data retrieval call binding the contract method 0x3cb747bf.
//
// Solidity: function messenger() view returns(address)
func (_L1Staking *L1StakingSession) Messenger() (common.Address, error) {
	return _L1Staking.Contract.Messenger(&_L1Staking.CallOpts)
}

// Messenger is a free data retrieval call binding the contract method 0x3cb747bf.
//
// Solidity: function messenger() view returns(address)
func (_L1Staking *L1StakingCallerSession) Messenger() (common.Address, error) {
	return _L1Staking.Contract.Messenger(&_L1Staking.CallOpts)
}

// Nonce is a free data retrieval call binding the contract method 0xaffed0e0.
//
// Solidity: function nonce() view returns(uint256)
func (_L1Staking *L1StakingCaller) Nonce(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "nonce")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Nonce is a free data retrieval call binding the contract method 0xaffed0e0.
//
// Solidity: function nonce() view returns(uint256)
func (_L1Staking *L1StakingSession) Nonce() (*big.Int, error) {
	return _L1Staking.Contract.Nonce(&_L1Staking.CallOpts)
}

// Nonce is a free data retrieval call binding the contract method 0xaffed0e0.
//
// Solidity: function nonce() view returns(uint256)
func (_L1Staking *L1StakingCallerSession) Nonce() (*big.Int, error) {
	return _L1Staking.Contract.Nonce(&_L1Staking.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_L1Staking *L1StakingCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_L1Staking *L1StakingSession) Owner() (common.Address, error) {
	return _L1Staking.Contract.Owner(&_L1Staking.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_L1Staking *L1StakingCallerSession) Owner() (common.Address, error) {
	return _L1Staking.Contract.Owner(&_L1Staking.CallOpts)
}

// RemovedList is a free data retrieval call binding the contract method 0x3a9bbede.
//
// Solidity: function removedList(address stakerAddr) view returns(bool removed)
func (_L1Staking *L1StakingCaller) RemovedList(opts *bind.CallOpts, stakerAddr common.Address) (bool, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "removedList", stakerAddr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// RemovedList is a free data retrieval call binding the contract method 0x3a9bbede.
//
// Solidity: function removedList(address stakerAddr) view returns(bool removed)
func (_L1Staking *L1StakingSession) RemovedList(stakerAddr common.Address) (bool, error) {
	return _L1Staking.Contract.RemovedList(&_L1Staking.CallOpts, stakerAddr)
}

// RemovedList is a free data retrieval call binding the contract method 0x3a9bbede.
//
// Solidity: function removedList(address stakerAddr) view returns(bool removed)
func (_L1Staking *L1StakingCallerSession) RemovedList(stakerAddr common.Address) (bool, error) {
	return _L1Staking.Contract.RemovedList(&_L1Staking.CallOpts, stakerAddr)
}

// RewardPercentage is a free data retrieval call binding the contract method 0x52d472eb.
//
// Solidity: function rewardPercentage() view returns(uint256)
func (_L1Staking *L1StakingCaller) RewardPercentage(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "rewardPercentage")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RewardPercentage is a free data retrieval call binding the contract method 0x52d472eb.
//
// Solidity: function rewardPercentage() view returns(uint256)
func (_L1Staking *L1StakingSession) RewardPercentage() (*big.Int, error) {
	return _L1Staking.Contract.RewardPercentage(&_L1Staking.CallOpts)
}

// RewardPercentage is a free data retrieval call binding the contract method 0x52d472eb.
//
// Solidity: function rewardPercentage() view returns(uint256)
func (_L1Staking *L1StakingCallerSession) RewardPercentage() (*big.Int, error) {
	return _L1Staking.Contract.RewardPercentage(&_L1Staking.CallOpts)
}

// RollupContract is a free data retrieval call binding the contract method 0xbfa02ba9.
//
// Solidity: function rollupContract() view returns(address)
func (_L1Staking *L1StakingCaller) RollupContract(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "rollupContract")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RollupContract is a free data retrieval call binding the contract method 0xbfa02ba9.
//
// Solidity: function rollupContract() view returns(address)
func (_L1Staking *L1StakingSession) RollupContract() (common.Address, error) {
	return _L1Staking.Contract.RollupContract(&_L1Staking.CallOpts)
}

// RollupContract is a free data retrieval call binding the contract method 0xbfa02ba9.
//
// Solidity: function rollupContract() view returns(address)
func (_L1Staking *L1StakingCallerSession) RollupContract() (common.Address, error) {
	return _L1Staking.Contract.RollupContract(&_L1Staking.CallOpts)
}

// SlashRemaining is a free data retrieval call binding the contract method 0xab8c53dc.
//
// Solidity: function slashRemaining() view returns(uint256)
func (_L1Staking *L1StakingCaller) SlashRemaining(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "slashRemaining")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SlashRemaining is a free data retrieval call binding the contract method 0xab8c53dc.
//
// Solidity: function slashRemaining() view returns(uint256)
func (_L1Staking *L1StakingSession) SlashRemaining() (*big.Int, error) {
	return _L1Staking.Contract.SlashRemaining(&_L1Staking.CallOpts)
}

// SlashRemaining is a free data retrieval call binding the contract method 0xab8c53dc.
//
// Solidity: function slashRemaining() view returns(uint256)
func (_L1Staking *L1StakingCallerSession) SlashRemaining() (*big.Int, error) {
	return _L1Staking.Contract.SlashRemaining(&_L1Staking.CallOpts)
}

// StakerIndexes is a free data retrieval call binding the contract method 0xdd4785f5.
//
// Solidity: function stakerIndexes(address stakerAddr) view returns(uint8 index)
func (_L1Staking *L1StakingCaller) StakerIndexes(opts *bind.CallOpts, stakerAddr common.Address) (uint8, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "stakerIndexes", stakerAddr)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// StakerIndexes is a free data retrieval call binding the contract method 0xdd4785f5.
//
// Solidity: function stakerIndexes(address stakerAddr) view returns(uint8 index)
func (_L1Staking *L1StakingSession) StakerIndexes(stakerAddr common.Address) (uint8, error) {
	return _L1Staking.Contract.StakerIndexes(&_L1Staking.CallOpts, stakerAddr)
}

// StakerIndexes is a free data retrieval call binding the contract method 0xdd4785f5.
//
// Solidity: function stakerIndexes(address stakerAddr) view returns(uint8 index)
func (_L1Staking *L1StakingCallerSession) StakerIndexes(stakerAddr common.Address) (uint8, error) {
	return _L1Staking.Contract.StakerIndexes(&_L1Staking.CallOpts, stakerAddr)
}

// StakerSet is a free data retrieval call binding the contract method 0x303afb9e.
//
// Solidity: function stakerSet(uint256 ) view returns(address)
func (_L1Staking *L1StakingCaller) StakerSet(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "stakerSet", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakerSet is a free data retrieval call binding the contract method 0x303afb9e.
//
// Solidity: function stakerSet(uint256 ) view returns(address)
func (_L1Staking *L1StakingSession) StakerSet(arg0 *big.Int) (common.Address, error) {
	return _L1Staking.Contract.StakerSet(&_L1Staking.CallOpts, arg0)
}

// StakerSet is a free data retrieval call binding the contract method 0x303afb9e.
//
// Solidity: function stakerSet(uint256 ) view returns(address)
func (_L1Staking *L1StakingCallerSession) StakerSet(arg0 *big.Int) (common.Address, error) {
	return _L1Staking.Contract.StakerSet(&_L1Staking.CallOpts, arg0)
}

// Stakers is a free data retrieval call binding the contract method 0x9168ae72.
//
// Solidity: function stakers(address stakerAddr) view returns(address addr, bytes32 tmKey, bytes blsKey)
func (_L1Staking *L1StakingCaller) Stakers(opts *bind.CallOpts, stakerAddr common.Address) (struct {
	Addr   common.Address
	TmKey  [32]byte
	BlsKey []byte
}, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "stakers", stakerAddr)

	outstruct := new(struct {
		Addr   common.Address
		TmKey  [32]byte
		BlsKey []byte
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Addr = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.TmKey = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.BlsKey = *abi.ConvertType(out[2], new([]byte)).(*[]byte)

	return *outstruct, err

}

// Stakers is a free data retrieval call binding the contract method 0x9168ae72.
//
// Solidity: function stakers(address stakerAddr) view returns(address addr, bytes32 tmKey, bytes blsKey)
func (_L1Staking *L1StakingSession) Stakers(stakerAddr common.Address) (struct {
	Addr   common.Address
	TmKey  [32]byte
	BlsKey []byte
}, error) {
	return _L1Staking.Contract.Stakers(&_L1Staking.CallOpts, stakerAddr)
}

// Stakers is a free data retrieval call binding the contract method 0x9168ae72.
//
// Solidity: function stakers(address stakerAddr) view returns(address addr, bytes32 tmKey, bytes blsKey)
func (_L1Staking *L1StakingCallerSession) Stakers(stakerAddr common.Address) (struct {
	Addr   common.Address
	TmKey  [32]byte
	BlsKey []byte
}, error) {
	return _L1Staking.Contract.Stakers(&_L1Staking.CallOpts, stakerAddr)
}

// StakingValue is a free data retrieval call binding the contract method 0x4d64903a.
//
// Solidity: function stakingValue() view returns(uint256)
func (_L1Staking *L1StakingCaller) StakingValue(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "stakingValue")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StakingValue is a free data retrieval call binding the contract method 0x4d64903a.
//
// Solidity: function stakingValue() view returns(uint256)
func (_L1Staking *L1StakingSession) StakingValue() (*big.Int, error) {
	return _L1Staking.Contract.StakingValue(&_L1Staking.CallOpts)
}

// StakingValue is a free data retrieval call binding the contract method 0x4d64903a.
//
// Solidity: function stakingValue() view returns(uint256)
func (_L1Staking *L1StakingCallerSession) StakingValue() (*big.Int, error) {
	return _L1Staking.Contract.StakingValue(&_L1Staking.CallOpts)
}

// TmKeys is a free data retrieval call binding the contract method 0x692c565b.
//
// Solidity: function tmKeys(bytes32 tmPubkey) view returns(bool exist)
func (_L1Staking *L1StakingCaller) TmKeys(opts *bind.CallOpts, tmPubkey [32]byte) (bool, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "tmKeys", tmPubkey)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// TmKeys is a free data retrieval call binding the contract method 0x692c565b.
//
// Solidity: function tmKeys(bytes32 tmPubkey) view returns(bool exist)
func (_L1Staking *L1StakingSession) TmKeys(tmPubkey [32]byte) (bool, error) {
	return _L1Staking.Contract.TmKeys(&_L1Staking.CallOpts, tmPubkey)
}

// TmKeys is a free data retrieval call binding the contract method 0x692c565b.
//
// Solidity: function tmKeys(bytes32 tmPubkey) view returns(bool exist)
func (_L1Staking *L1StakingCallerSession) TmKeys(tmPubkey [32]byte) (bool, error) {
	return _L1Staking.Contract.TmKeys(&_L1Staking.CallOpts, tmPubkey)
}

// VerifySignature is a free data retrieval call binding the contract method 0x74fe27b7.
//
// Solidity: function verifySignature(uint256 , address[] , bytes32 , bytes ) pure returns(bool)
func (_L1Staking *L1StakingCaller) VerifySignature(opts *bind.CallOpts, arg0 *big.Int, arg1 []common.Address, arg2 [32]byte, arg3 []byte) (bool, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "verifySignature", arg0, arg1, arg2, arg3)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// VerifySignature is a free data retrieval call binding the contract method 0x74fe27b7.
//
// Solidity: function verifySignature(uint256 , address[] , bytes32 , bytes ) pure returns(bool)
func (_L1Staking *L1StakingSession) VerifySignature(arg0 *big.Int, arg1 []common.Address, arg2 [32]byte, arg3 []byte) (bool, error) {
	return _L1Staking.Contract.VerifySignature(&_L1Staking.CallOpts, arg0, arg1, arg2, arg3)
}

// VerifySignature is a free data retrieval call binding the contract method 0x74fe27b7.
//
// Solidity: function verifySignature(uint256 , address[] , bytes32 , bytes ) pure returns(bool)
func (_L1Staking *L1StakingCallerSession) VerifySignature(arg0 *big.Int, arg1 []common.Address, arg2 [32]byte, arg3 []byte) (bool, error) {
	return _L1Staking.Contract.VerifySignature(&_L1Staking.CallOpts, arg0, arg1, arg2, arg3)
}

// Whitelist is a free data retrieval call binding the contract method 0x9b19251a.
//
// Solidity: function whitelist(address stakerAddr) view returns(bool inWhitelist)
func (_L1Staking *L1StakingCaller) Whitelist(opts *bind.CallOpts, stakerAddr common.Address) (bool, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "whitelist", stakerAddr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Whitelist is a free data retrieval call binding the contract method 0x9b19251a.
//
// Solidity: function whitelist(address stakerAddr) view returns(bool inWhitelist)
func (_L1Staking *L1StakingSession) Whitelist(stakerAddr common.Address) (bool, error) {
	return _L1Staking.Contract.Whitelist(&_L1Staking.CallOpts, stakerAddr)
}

// Whitelist is a free data retrieval call binding the contract method 0x9b19251a.
//
// Solidity: function whitelist(address stakerAddr) view returns(bool inWhitelist)
func (_L1Staking *L1StakingCallerSession) Whitelist(stakerAddr common.Address) (bool, error) {
	return _L1Staking.Contract.Whitelist(&_L1Staking.CallOpts, stakerAddr)
}

// WithdrawalLockBlocks is a free data retrieval call binding the contract method 0x41de239b.
//
// Solidity: function withdrawalLockBlocks() view returns(uint256)
func (_L1Staking *L1StakingCaller) WithdrawalLockBlocks(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "withdrawalLockBlocks")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WithdrawalLockBlocks is a free data retrieval call binding the contract method 0x41de239b.
//
// Solidity: function withdrawalLockBlocks() view returns(uint256)
func (_L1Staking *L1StakingSession) WithdrawalLockBlocks() (*big.Int, error) {
	return _L1Staking.Contract.WithdrawalLockBlocks(&_L1Staking.CallOpts)
}

// WithdrawalLockBlocks is a free data retrieval call binding the contract method 0x41de239b.
//
// Solidity: function withdrawalLockBlocks() view returns(uint256)
func (_L1Staking *L1StakingCallerSession) WithdrawalLockBlocks() (*big.Int, error) {
	return _L1Staking.Contract.WithdrawalLockBlocks(&_L1Staking.CallOpts)
}

// Withdrawals is a free data retrieval call binding the contract method 0x7a9262a2.
//
// Solidity: function withdrawals(address staker) view returns(uint256 amount)
func (_L1Staking *L1StakingCaller) Withdrawals(opts *bind.CallOpts, staker common.Address) (*big.Int, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "withdrawals", staker)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Withdrawals is a free data retrieval call binding the contract method 0x7a9262a2.
//
// Solidity: function withdrawals(address staker) view returns(uint256 amount)
func (_L1Staking *L1StakingSession) Withdrawals(staker common.Address) (*big.Int, error) {
	return _L1Staking.Contract.Withdrawals(&_L1Staking.CallOpts, staker)
}

// Withdrawals is a free data retrieval call binding the contract method 0x7a9262a2.
//
// Solidity: function withdrawals(address staker) view returns(uint256 amount)
func (_L1Staking *L1StakingCallerSession) Withdrawals(staker common.Address) (*big.Int, error) {
	return _L1Staking.Contract.Withdrawals(&_L1Staking.CallOpts, staker)
}

// ClaimSlashRemaining is a paid mutator transaction binding the contract method 0xcde4cd11.
//
// Solidity: function claimSlashRemaining(address receiver) returns()
func (_L1Staking *L1StakingTransactor) ClaimSlashRemaining(opts *bind.TransactOpts, receiver common.Address) (*types.Transaction, error) {
	return _L1Staking.contract.Transact(opts, "claimSlashRemaining", receiver)
}

// ClaimSlashRemaining is a paid mutator transaction binding the contract method 0xcde4cd11.
//
// Solidity: function claimSlashRemaining(address receiver) returns()
func (_L1Staking *L1StakingSession) ClaimSlashRemaining(receiver common.Address) (*types.Transaction, error) {
	return _L1Staking.Contract.ClaimSlashRemaining(&_L1Staking.TransactOpts, receiver)
}

// ClaimSlashRemaining is a paid mutator transaction binding the contract method 0xcde4cd11.
//
// Solidity: function claimSlashRemaining(address receiver) returns()
func (_L1Staking *L1StakingTransactorSession) ClaimSlashRemaining(receiver common.Address) (*types.Transaction, error) {
	return _L1Staking.Contract.ClaimSlashRemaining(&_L1Staking.TransactOpts, receiver)
}

// ClaimWithdrawal is a paid mutator transaction binding the contract method 0xa3066aab.
//
// Solidity: function claimWithdrawal(address receiver) returns()
func (_L1Staking *L1StakingTransactor) ClaimWithdrawal(opts *bind.TransactOpts, receiver common.Address) (*types.Transaction, error) {
	return _L1Staking.contract.Transact(opts, "claimWithdrawal", receiver)
}

// ClaimWithdrawal is a paid mutator transaction binding the contract method 0xa3066aab.
//
// Solidity: function claimWithdrawal(address receiver) returns()
func (_L1Staking *L1StakingSession) ClaimWithdrawal(receiver common.Address) (*types.Transaction, error) {
	return _L1Staking.Contract.ClaimWithdrawal(&_L1Staking.TransactOpts, receiver)
}

// ClaimWithdrawal is a paid mutator transaction binding the contract method 0xa3066aab.
//
// Solidity: function claimWithdrawal(address receiver) returns()
func (_L1Staking *L1StakingTransactorSession) ClaimWithdrawal(receiver common.Address) (*types.Transaction, error) {
	return _L1Staking.Contract.ClaimWithdrawal(&_L1Staking.TransactOpts, receiver)
}

// CleanStakerStore is a paid mutator transaction binding the contract method 0x3ee2a1f9.
//
// Solidity: function cleanStakerStore() returns()
func (_L1Staking *L1StakingTransactor) CleanStakerStore(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _L1Staking.contract.Transact(opts, "cleanStakerStore")
}

// CleanStakerStore is a paid mutator transaction binding the contract method 0x3ee2a1f9.
//
// Solidity: function cleanStakerStore() returns()
func (_L1Staking *L1StakingSession) CleanStakerStore() (*types.Transaction, error) {
	return _L1Staking.Contract.CleanStakerStore(&_L1Staking.TransactOpts)
}

// CleanStakerStore is a paid mutator transaction binding the contract method 0x3ee2a1f9.
//
// Solidity: function cleanStakerStore() returns()
func (_L1Staking *L1StakingTransactorSession) CleanStakerStore() (*types.Transaction, error) {
	return _L1Staking.Contract.CleanStakerStore(&_L1Staking.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0x8142951a.
//
// Solidity: function initialize(address _rollupContract, uint256 _stakingValue, uint256 _challengeDeposit, uint256 _lockBlocks, uint256 _rewardPercentage, uint256 _gasLimitAdd, uint256 _gasLimitRemove) returns()
func (_L1Staking *L1StakingTransactor) Initialize(opts *bind.TransactOpts, _rollupContract common.Address, _stakingValue *big.Int, _challengeDeposit *big.Int, _lockBlocks *big.Int, _rewardPercentage *big.Int, _gasLimitAdd *big.Int, _gasLimitRemove *big.Int) (*types.Transaction, error) {
	return _L1Staking.contract.Transact(opts, "initialize", _rollupContract, _stakingValue, _challengeDeposit, _lockBlocks, _rewardPercentage, _gasLimitAdd, _gasLimitRemove)
}

// Initialize is a paid mutator transaction binding the contract method 0x8142951a.
//
// Solidity: function initialize(address _rollupContract, uint256 _stakingValue, uint256 _challengeDeposit, uint256 _lockBlocks, uint256 _rewardPercentage, uint256 _gasLimitAdd, uint256 _gasLimitRemove) returns()
func (_L1Staking *L1StakingSession) Initialize(_rollupContract common.Address, _stakingValue *big.Int, _challengeDeposit *big.Int, _lockBlocks *big.Int, _rewardPercentage *big.Int, _gasLimitAdd *big.Int, _gasLimitRemove *big.Int) (*types.Transaction, error) {
	return _L1Staking.Contract.Initialize(&_L1Staking.TransactOpts, _rollupContract, _stakingValue, _challengeDeposit, _lockBlocks, _rewardPercentage, _gasLimitAdd, _gasLimitRemove)
}

// Initialize is a paid mutator transaction binding the contract method 0x8142951a.
//
// Solidity: function initialize(address _rollupContract, uint256 _stakingValue, uint256 _challengeDeposit, uint256 _lockBlocks, uint256 _rewardPercentage, uint256 _gasLimitAdd, uint256 _gasLimitRemove) returns()
func (_L1Staking *L1StakingTransactorSession) Initialize(_rollupContract common.Address, _stakingValue *big.Int, _challengeDeposit *big.Int, _lockBlocks *big.Int, _rewardPercentage *big.Int, _gasLimitAdd *big.Int, _gasLimitRemove *big.Int) (*types.Transaction, error) {
	return _L1Staking.Contract.Initialize(&_L1Staking.TransactOpts, _rollupContract, _stakingValue, _challengeDeposit, _lockBlocks, _rewardPercentage, _gasLimitAdd, _gasLimitRemove)
}

// Register is a paid mutator transaction binding the contract method 0x2a28e5a3.
//
// Solidity: function register(bytes32 tmKey, bytes blsKey) payable returns()
func (_L1Staking *L1StakingTransactor) Register(opts *bind.TransactOpts, tmKey [32]byte, blsKey []byte) (*types.Transaction, error) {
	return _L1Staking.contract.Transact(opts, "register", tmKey, blsKey)
}

// Register is a paid mutator transaction binding the contract method 0x2a28e5a3.
//
// Solidity: function register(bytes32 tmKey, bytes blsKey) payable returns()
func (_L1Staking *L1StakingSession) Register(tmKey [32]byte, blsKey []byte) (*types.Transaction, error) {
	return _L1Staking.Contract.Register(&_L1Staking.TransactOpts, tmKey, blsKey)
}

// Register is a paid mutator transaction binding the contract method 0x2a28e5a3.
//
// Solidity: function register(bytes32 tmKey, bytes blsKey) payable returns()
func (_L1Staking *L1StakingTransactorSession) Register(tmKey [32]byte, blsKey []byte) (*types.Transaction, error) {
	return _L1Staking.Contract.Register(&_L1Staking.TransactOpts, tmKey, blsKey)
}

// RemoveStaker is a paid mutator transaction binding the contract method 0x320ff860.
//
// Solidity: function removeStaker(address[] _stakers) returns()
func (_L1Staking *L1StakingTransactor) RemoveStaker(opts *bind.TransactOpts, _stakers []common.Address) (*types.Transaction, error) {
	return _L1Staking.contract.Transact(opts, "removeStaker", _stakers)
}

// RemoveStaker is a paid mutator transaction binding the contract method 0x320ff860.
//
// Solidity: function removeStaker(address[] _stakers) returns()
func (_L1Staking *L1StakingSession) RemoveStaker(_stakers []common.Address) (*types.Transaction, error) {
	return _L1Staking.Contract.RemoveStaker(&_L1Staking.TransactOpts, _stakers)
}

// RemoveStaker is a paid mutator transaction binding the contract method 0x320ff860.
//
// Solidity: function removeStaker(address[] _stakers) returns()
func (_L1Staking *L1StakingTransactorSession) RemoveStaker(_stakers []common.Address) (*types.Transaction, error) {
	return _L1Staking.Contract.RemoveStaker(&_L1Staking.TransactOpts, _stakers)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_L1Staking *L1StakingTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _L1Staking.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_L1Staking *L1StakingSession) RenounceOwnership() (*types.Transaction, error) {
	return _L1Staking.Contract.RenounceOwnership(&_L1Staking.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_L1Staking *L1StakingTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _L1Staking.Contract.RenounceOwnership(&_L1Staking.TransactOpts)
}

// Slash is a paid mutator transaction binding the contract method 0x45bc4d10.
//
// Solidity: function slash(uint256 sequencersBitmap) returns(uint256)
func (_L1Staking *L1StakingTransactor) Slash(opts *bind.TransactOpts, sequencersBitmap *big.Int) (*types.Transaction, error) {
	return _L1Staking.contract.Transact(opts, "slash", sequencersBitmap)
}

// Slash is a paid mutator transaction binding the contract method 0x45bc4d10.
//
// Solidity: function slash(uint256 sequencersBitmap) returns(uint256)
func (_L1Staking *L1StakingSession) Slash(sequencersBitmap *big.Int) (*types.Transaction, error) {
	return _L1Staking.Contract.Slash(&_L1Staking.TransactOpts, sequencersBitmap)
}

// Slash is a paid mutator transaction binding the contract method 0x45bc4d10.
//
// Solidity: function slash(uint256 sequencersBitmap) returns(uint256)
func (_L1Staking *L1StakingTransactorSession) Slash(sequencersBitmap *big.Int) (*types.Transaction, error) {
	return _L1Staking.Contract.Slash(&_L1Staking.TransactOpts, sequencersBitmap)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_L1Staking *L1StakingTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _L1Staking.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_L1Staking *L1StakingSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _L1Staking.Contract.TransferOwnership(&_L1Staking.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_L1Staking *L1StakingTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _L1Staking.Contract.TransferOwnership(&_L1Staking.TransactOpts, newOwner)
}

// UpdateChallengeDeposit is a paid mutator transaction binding the contract method 0x35928991.
//
// Solidity: function updateChallengeDeposit(uint256 _challengeDeposit) returns()
func (_L1Staking *L1StakingTransactor) UpdateChallengeDeposit(opts *bind.TransactOpts, _challengeDeposit *big.Int) (*types.Transaction, error) {
	return _L1Staking.contract.Transact(opts, "updateChallengeDeposit", _challengeDeposit)
}

// UpdateChallengeDeposit is a paid mutator transaction binding the contract method 0x35928991.
//
// Solidity: function updateChallengeDeposit(uint256 _challengeDeposit) returns()
func (_L1Staking *L1StakingSession) UpdateChallengeDeposit(_challengeDeposit *big.Int) (*types.Transaction, error) {
	return _L1Staking.Contract.UpdateChallengeDeposit(&_L1Staking.TransactOpts, _challengeDeposit)
}

// UpdateChallengeDeposit is a paid mutator transaction binding the contract method 0x35928991.
//
// Solidity: function updateChallengeDeposit(uint256 _challengeDeposit) returns()
func (_L1Staking *L1StakingTransactorSession) UpdateChallengeDeposit(_challengeDeposit *big.Int) (*types.Transaction, error) {
	return _L1Staking.Contract.UpdateChallengeDeposit(&_L1Staking.TransactOpts, _challengeDeposit)
}

// UpdateGasLimitAddStaker is a paid mutator transaction binding the contract method 0xae81de53.
//
// Solidity: function updateGasLimitAddStaker(uint256 _gasLimitAdd) returns()
func (_L1Staking *L1StakingTransactor) UpdateGasLimitAddStaker(opts *bind.TransactOpts, _gasLimitAdd *big.Int) (*types.Transaction, error) {
	return _L1Staking.contract.Transact(opts, "updateGasLimitAddStaker", _gasLimitAdd)
}

// UpdateGasLimitAddStaker is a paid mutator transaction binding the contract method 0xae81de53.
//
// Solidity: function updateGasLimitAddStaker(uint256 _gasLimitAdd) returns()
func (_L1Staking *L1StakingSession) UpdateGasLimitAddStaker(_gasLimitAdd *big.Int) (*types.Transaction, error) {
	return _L1Staking.Contract.UpdateGasLimitAddStaker(&_L1Staking.TransactOpts, _gasLimitAdd)
}

// UpdateGasLimitAddStaker is a paid mutator transaction binding the contract method 0xae81de53.
//
// Solidity: function updateGasLimitAddStaker(uint256 _gasLimitAdd) returns()
func (_L1Staking *L1StakingTransactorSession) UpdateGasLimitAddStaker(_gasLimitAdd *big.Int) (*types.Transaction, error) {
	return _L1Staking.Contract.UpdateGasLimitAddStaker(&_L1Staking.TransactOpts, _gasLimitAdd)
}

// UpdateGasLimitRemoveStakers is a paid mutator transaction binding the contract method 0x8a565ac3.
//
// Solidity: function updateGasLimitRemoveStakers(uint256 _gasLimitRemove) returns()
func (_L1Staking *L1StakingTransactor) UpdateGasLimitRemoveStakers(opts *bind.TransactOpts, _gasLimitRemove *big.Int) (*types.Transaction, error) {
	return _L1Staking.contract.Transact(opts, "updateGasLimitRemoveStakers", _gasLimitRemove)
}

// UpdateGasLimitRemoveStakers is a paid mutator transaction binding the contract method 0x8a565ac3.
//
// Solidity: function updateGasLimitRemoveStakers(uint256 _gasLimitRemove) returns()
func (_L1Staking *L1StakingSession) UpdateGasLimitRemoveStakers(_gasLimitRemove *big.Int) (*types.Transaction, error) {
	return _L1Staking.Contract.UpdateGasLimitRemoveStakers(&_L1Staking.TransactOpts, _gasLimitRemove)
}

// UpdateGasLimitRemoveStakers is a paid mutator transaction binding the contract method 0x8a565ac3.
//
// Solidity: function updateGasLimitRemoveStakers(uint256 _gasLimitRemove) returns()
func (_L1Staking *L1StakingTransactorSession) UpdateGasLimitRemoveStakers(_gasLimitRemove *big.Int) (*types.Transaction, error) {
	return _L1Staking.Contract.UpdateGasLimitRemoveStakers(&_L1Staking.TransactOpts, _gasLimitRemove)
}

// UpdateRewardPercentage is a paid mutator transaction binding the contract method 0xa4f209b0.
//
// Solidity: function updateRewardPercentage(uint256 _rewardPercentage) returns()
func (_L1Staking *L1StakingTransactor) UpdateRewardPercentage(opts *bind.TransactOpts, _rewardPercentage *big.Int) (*types.Transaction, error) {
	return _L1Staking.contract.Transact(opts, "updateRewardPercentage", _rewardPercentage)
}

// UpdateRewardPercentage is a paid mutator transaction binding the contract method 0xa4f209b0.
//
// Solidity: function updateRewardPercentage(uint256 _rewardPercentage) returns()
func (_L1Staking *L1StakingSession) UpdateRewardPercentage(_rewardPercentage *big.Int) (*types.Transaction, error) {
	return _L1Staking.Contract.UpdateRewardPercentage(&_L1Staking.TransactOpts, _rewardPercentage)
}

// UpdateRewardPercentage is a paid mutator transaction binding the contract method 0xa4f209b0.
//
// Solidity: function updateRewardPercentage(uint256 _rewardPercentage) returns()
func (_L1Staking *L1StakingTransactorSession) UpdateRewardPercentage(_rewardPercentage *big.Int) (*types.Transaction, error) {
	return _L1Staking.Contract.UpdateRewardPercentage(&_L1Staking.TransactOpts, _rewardPercentage)
}

// UpdateStakingValue is a paid mutator transaction binding the contract method 0xf4fe7fef.
//
// Solidity: function updateStakingValue(uint256 _stakingValue) returns()
func (_L1Staking *L1StakingTransactor) UpdateStakingValue(opts *bind.TransactOpts, _stakingValue *big.Int) (*types.Transaction, error) {
	return _L1Staking.contract.Transact(opts, "updateStakingValue", _stakingValue)
}

// UpdateStakingValue is a paid mutator transaction binding the contract method 0xf4fe7fef.
//
// Solidity: function updateStakingValue(uint256 _stakingValue) returns()
func (_L1Staking *L1StakingSession) UpdateStakingValue(_stakingValue *big.Int) (*types.Transaction, error) {
	return _L1Staking.Contract.UpdateStakingValue(&_L1Staking.TransactOpts, _stakingValue)
}

// UpdateStakingValue is a paid mutator transaction binding the contract method 0xf4fe7fef.
//
// Solidity: function updateStakingValue(uint256 _stakingValue) returns()
func (_L1Staking *L1StakingTransactorSession) UpdateStakingValue(_stakingValue *big.Int) (*types.Transaction, error) {
	return _L1Staking.Contract.UpdateStakingValue(&_L1Staking.TransactOpts, _stakingValue)
}

// UpdateWhitelist is a paid mutator transaction binding the contract method 0xc7cd469a.
//
// Solidity: function updateWhitelist(address[] add, address[] remove) returns()
func (_L1Staking *L1StakingTransactor) UpdateWhitelist(opts *bind.TransactOpts, add []common.Address, remove []common.Address) (*types.Transaction, error) {
	return _L1Staking.contract.Transact(opts, "updateWhitelist", add, remove)
}

// UpdateWhitelist is a paid mutator transaction binding the contract method 0xc7cd469a.
//
// Solidity: function updateWhitelist(address[] add, address[] remove) returns()
func (_L1Staking *L1StakingSession) UpdateWhitelist(add []common.Address, remove []common.Address) (*types.Transaction, error) {
	return _L1Staking.Contract.UpdateWhitelist(&_L1Staking.TransactOpts, add, remove)
}

// UpdateWhitelist is a paid mutator transaction binding the contract method 0xc7cd469a.
//
// Solidity: function updateWhitelist(address[] add, address[] remove) returns()
func (_L1Staking *L1StakingTransactorSession) UpdateWhitelist(add []common.Address, remove []common.Address) (*types.Transaction, error) {
	return _L1Staking.Contract.UpdateWhitelist(&_L1Staking.TransactOpts, add, remove)
}

// Withdraw is a paid mutator transaction binding the contract method 0x3ccfd60b.
//
// Solidity: function withdraw() returns()
func (_L1Staking *L1StakingTransactor) Withdraw(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _L1Staking.contract.Transact(opts, "withdraw")
}

// Withdraw is a paid mutator transaction binding the contract method 0x3ccfd60b.
//
// Solidity: function withdraw() returns()
func (_L1Staking *L1StakingSession) Withdraw() (*types.Transaction, error) {
	return _L1Staking.Contract.Withdraw(&_L1Staking.TransactOpts)
}

// Withdraw is a paid mutator transaction binding the contract method 0x3ccfd60b.
//
// Solidity: function withdraw() returns()
func (_L1Staking *L1StakingTransactorSession) Withdraw() (*types.Transaction, error) {
	return _L1Staking.Contract.Withdraw(&_L1Staking.TransactOpts)
}

// L1StakingChallengeDepositUpdatedIterator is returned from FilterChallengeDepositUpdated and is used to iterate over the raw logs and unpacked data for ChallengeDepositUpdated events raised by the L1Staking contract.
type L1StakingChallengeDepositUpdatedIterator struct {
	Event *L1StakingChallengeDepositUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1StakingChallengeDepositUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1StakingChallengeDepositUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1StakingChallengeDepositUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1StakingChallengeDepositUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1StakingChallengeDepositUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1StakingChallengeDepositUpdated represents a ChallengeDepositUpdated event raised by the L1Staking contract.
type L1StakingChallengeDepositUpdated struct {
	OldChallengeDeposit *big.Int
	NewChallengeDeposit *big.Int
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterChallengeDepositUpdated is a free log retrieval operation binding the contract event 0x36f971a40478225aeb80cfbf5e80306e8cb76d3bf7d56fdc5e490945cddb7d55.
//
// Solidity: event ChallengeDepositUpdated(uint256 oldChallengeDeposit, uint256 newChallengeDeposit)
func (_L1Staking *L1StakingFilterer) FilterChallengeDepositUpdated(opts *bind.FilterOpts) (*L1StakingChallengeDepositUpdatedIterator, error) {

	logs, sub, err := _L1Staking.contract.FilterLogs(opts, "ChallengeDepositUpdated")
	if err != nil {
		return nil, err
	}
	return &L1StakingChallengeDepositUpdatedIterator{contract: _L1Staking.contract, event: "ChallengeDepositUpdated", logs: logs, sub: sub}, nil
}

// WatchChallengeDepositUpdated is a free log subscription operation binding the contract event 0x36f971a40478225aeb80cfbf5e80306e8cb76d3bf7d56fdc5e490945cddb7d55.
//
// Solidity: event ChallengeDepositUpdated(uint256 oldChallengeDeposit, uint256 newChallengeDeposit)
func (_L1Staking *L1StakingFilterer) WatchChallengeDepositUpdated(opts *bind.WatchOpts, sink chan<- *L1StakingChallengeDepositUpdated) (event.Subscription, error) {

	logs, sub, err := _L1Staking.contract.WatchLogs(opts, "ChallengeDepositUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1StakingChallengeDepositUpdated)
				if err := _L1Staking.contract.UnpackLog(event, "ChallengeDepositUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChallengeDepositUpdated is a log parse operation binding the contract event 0x36f971a40478225aeb80cfbf5e80306e8cb76d3bf7d56fdc5e490945cddb7d55.
//
// Solidity: event ChallengeDepositUpdated(uint256 oldChallengeDeposit, uint256 newChallengeDeposit)
func (_L1Staking *L1StakingFilterer) ParseChallengeDepositUpdated(log types.Log) (*L1StakingChallengeDepositUpdated, error) {
	event := new(L1StakingChallengeDepositUpdated)
	if err := _L1Staking.contract.UnpackLog(event, "ChallengeDepositUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L1StakingClaimedIterator is returned from FilterClaimed and is used to iterate over the raw logs and unpacked data for Claimed events raised by the L1Staking contract.
type L1StakingClaimedIterator struct {
	Event *L1StakingClaimed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1StakingClaimedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1StakingClaimed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1StakingClaimed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1StakingClaimedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1StakingClaimedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1StakingClaimed represents a Claimed event raised by the L1Staking contract.
type L1StakingClaimed struct {
	Staker   common.Address
	Receiver common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterClaimed is a free log retrieval operation binding the contract event 0x89309c9b2aeaffbdce717113df9427298b20448c05919bf889e05f8c3094254b.
//
// Solidity: event Claimed(address indexed staker, address receiver)
func (_L1Staking *L1StakingFilterer) FilterClaimed(opts *bind.FilterOpts, staker []common.Address) (*L1StakingClaimedIterator, error) {

	var stakerRule []interface{}
	for _, stakerItem := range staker {
		stakerRule = append(stakerRule, stakerItem)
	}

	logs, sub, err := _L1Staking.contract.FilterLogs(opts, "Claimed", stakerRule)
	if err != nil {
		return nil, err
	}
	return &L1StakingClaimedIterator{contract: _L1Staking.contract, event: "Claimed", logs: logs, sub: sub}, nil
}

// WatchClaimed is a free log subscription operation binding the contract event 0x89309c9b2aeaffbdce717113df9427298b20448c05919bf889e05f8c3094254b.
//
// Solidity: event Claimed(address indexed staker, address receiver)
func (_L1Staking *L1StakingFilterer) WatchClaimed(opts *bind.WatchOpts, sink chan<- *L1StakingClaimed, staker []common.Address) (event.Subscription, error) {

	var stakerRule []interface{}
	for _, stakerItem := range staker {
		stakerRule = append(stakerRule, stakerItem)
	}

	logs, sub, err := _L1Staking.contract.WatchLogs(opts, "Claimed", stakerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1StakingClaimed)
				if err := _L1Staking.contract.UnpackLog(event, "Claimed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseClaimed is a log parse operation binding the contract event 0x89309c9b2aeaffbdce717113df9427298b20448c05919bf889e05f8c3094254b.
//
// Solidity: event Claimed(address indexed staker, address receiver)
func (_L1Staking *L1StakingFilterer) ParseClaimed(log types.Log) (*L1StakingClaimed, error) {
	event := new(L1StakingClaimed)
	if err := _L1Staking.contract.UnpackLog(event, "Claimed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L1StakingGasLimitAddStakerUpdatedIterator is returned from FilterGasLimitAddStakerUpdated and is used to iterate over the raw logs and unpacked data for GasLimitAddStakerUpdated events raised by the L1Staking contract.
type L1StakingGasLimitAddStakerUpdatedIterator struct {
	Event *L1StakingGasLimitAddStakerUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1StakingGasLimitAddStakerUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1StakingGasLimitAddStakerUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1StakingGasLimitAddStakerUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1StakingGasLimitAddStakerUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1StakingGasLimitAddStakerUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1StakingGasLimitAddStakerUpdated represents a GasLimitAddStakerUpdated event raised by the L1Staking contract.
type L1StakingGasLimitAddStakerUpdated struct {
	OldGasLimit *big.Int
	NewGasLimit *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterGasLimitAddStakerUpdated is a free log retrieval operation binding the contract event 0x0ef80fb82bf5439b8591744c0fde771f5d93dce7a7970b1e9b7828cdc3970e9c.
//
// Solidity: event GasLimitAddStakerUpdated(uint256 oldGasLimit, uint256 newGasLimit)
func (_L1Staking *L1StakingFilterer) FilterGasLimitAddStakerUpdated(opts *bind.FilterOpts) (*L1StakingGasLimitAddStakerUpdatedIterator, error) {

	logs, sub, err := _L1Staking.contract.FilterLogs(opts, "GasLimitAddStakerUpdated")
	if err != nil {
		return nil, err
	}
	return &L1StakingGasLimitAddStakerUpdatedIterator{contract: _L1Staking.contract, event: "GasLimitAddStakerUpdated", logs: logs, sub: sub}, nil
}

// WatchGasLimitAddStakerUpdated is a free log subscription operation binding the contract event 0x0ef80fb82bf5439b8591744c0fde771f5d93dce7a7970b1e9b7828cdc3970e9c.
//
// Solidity: event GasLimitAddStakerUpdated(uint256 oldGasLimit, uint256 newGasLimit)
func (_L1Staking *L1StakingFilterer) WatchGasLimitAddStakerUpdated(opts *bind.WatchOpts, sink chan<- *L1StakingGasLimitAddStakerUpdated) (event.Subscription, error) {

	logs, sub, err := _L1Staking.contract.WatchLogs(opts, "GasLimitAddStakerUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1StakingGasLimitAddStakerUpdated)
				if err := _L1Staking.contract.UnpackLog(event, "GasLimitAddStakerUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseGasLimitAddStakerUpdated is a log parse operation binding the contract event 0x0ef80fb82bf5439b8591744c0fde771f5d93dce7a7970b1e9b7828cdc3970e9c.
//
// Solidity: event GasLimitAddStakerUpdated(uint256 oldGasLimit, uint256 newGasLimit)
func (_L1Staking *L1StakingFilterer) ParseGasLimitAddStakerUpdated(log types.Log) (*L1StakingGasLimitAddStakerUpdated, error) {
	event := new(L1StakingGasLimitAddStakerUpdated)
	if err := _L1Staking.contract.UnpackLog(event, "GasLimitAddStakerUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L1StakingGasLimitRemoveStakersUpdatedIterator is returned from FilterGasLimitRemoveStakersUpdated and is used to iterate over the raw logs and unpacked data for GasLimitRemoveStakersUpdated events raised by the L1Staking contract.
type L1StakingGasLimitRemoveStakersUpdatedIterator struct {
	Event *L1StakingGasLimitRemoveStakersUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1StakingGasLimitRemoveStakersUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1StakingGasLimitRemoveStakersUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1StakingGasLimitRemoveStakersUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1StakingGasLimitRemoveStakersUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1StakingGasLimitRemoveStakersUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1StakingGasLimitRemoveStakersUpdated represents a GasLimitRemoveStakersUpdated event raised by the L1Staking contract.
type L1StakingGasLimitRemoveStakersUpdated struct {
	OldGasLimit *big.Int
	NewGasLimit *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterGasLimitRemoveStakersUpdated is a free log retrieval operation binding the contract event 0xdd4b37d1f14888147fe4be2cfaedcbf148fd07ececc856d0433241b8b6e4a7f7.
//
// Solidity: event GasLimitRemoveStakersUpdated(uint256 oldGasLimit, uint256 newGasLimit)
func (_L1Staking *L1StakingFilterer) FilterGasLimitRemoveStakersUpdated(opts *bind.FilterOpts) (*L1StakingGasLimitRemoveStakersUpdatedIterator, error) {

	logs, sub, err := _L1Staking.contract.FilterLogs(opts, "GasLimitRemoveStakersUpdated")
	if err != nil {
		return nil, err
	}
	return &L1StakingGasLimitRemoveStakersUpdatedIterator{contract: _L1Staking.contract, event: "GasLimitRemoveStakersUpdated", logs: logs, sub: sub}, nil
}

// WatchGasLimitRemoveStakersUpdated is a free log subscription operation binding the contract event 0xdd4b37d1f14888147fe4be2cfaedcbf148fd07ececc856d0433241b8b6e4a7f7.
//
// Solidity: event GasLimitRemoveStakersUpdated(uint256 oldGasLimit, uint256 newGasLimit)
func (_L1Staking *L1StakingFilterer) WatchGasLimitRemoveStakersUpdated(opts *bind.WatchOpts, sink chan<- *L1StakingGasLimitRemoveStakersUpdated) (event.Subscription, error) {

	logs, sub, err := _L1Staking.contract.WatchLogs(opts, "GasLimitRemoveStakersUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1StakingGasLimitRemoveStakersUpdated)
				if err := _L1Staking.contract.UnpackLog(event, "GasLimitRemoveStakersUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseGasLimitRemoveStakersUpdated is a log parse operation binding the contract event 0xdd4b37d1f14888147fe4be2cfaedcbf148fd07ececc856d0433241b8b6e4a7f7.
//
// Solidity: event GasLimitRemoveStakersUpdated(uint256 oldGasLimit, uint256 newGasLimit)
func (_L1Staking *L1StakingFilterer) ParseGasLimitRemoveStakersUpdated(log types.Log) (*L1StakingGasLimitRemoveStakersUpdated, error) {
	event := new(L1StakingGasLimitRemoveStakersUpdated)
	if err := _L1Staking.contract.UnpackLog(event, "GasLimitRemoveStakersUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L1StakingInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the L1Staking contract.
type L1StakingInitializedIterator struct {
	Event *L1StakingInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1StakingInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1StakingInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1StakingInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1StakingInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1StakingInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1StakingInitialized represents a Initialized event raised by the L1Staking contract.
type L1StakingInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_L1Staking *L1StakingFilterer) FilterInitialized(opts *bind.FilterOpts) (*L1StakingInitializedIterator, error) {

	logs, sub, err := _L1Staking.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &L1StakingInitializedIterator{contract: _L1Staking.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_L1Staking *L1StakingFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *L1StakingInitialized) (event.Subscription, error) {

	logs, sub, err := _L1Staking.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1StakingInitialized)
				if err := _L1Staking.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_L1Staking *L1StakingFilterer) ParseInitialized(log types.Log) (*L1StakingInitialized, error) {
	event := new(L1StakingInitialized)
	if err := _L1Staking.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L1StakingOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the L1Staking contract.
type L1StakingOwnershipTransferredIterator struct {
	Event *L1StakingOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1StakingOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1StakingOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1StakingOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1StakingOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1StakingOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1StakingOwnershipTransferred represents a OwnershipTransferred event raised by the L1Staking contract.
type L1StakingOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_L1Staking *L1StakingFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*L1StakingOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _L1Staking.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &L1StakingOwnershipTransferredIterator{contract: _L1Staking.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_L1Staking *L1StakingFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *L1StakingOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _L1Staking.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1StakingOwnershipTransferred)
				if err := _L1Staking.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_L1Staking *L1StakingFilterer) ParseOwnershipTransferred(log types.Log) (*L1StakingOwnershipTransferred, error) {
	event := new(L1StakingOwnershipTransferred)
	if err := _L1Staking.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L1StakingRegisteredIterator is returned from FilterRegistered and is used to iterate over the raw logs and unpacked data for Registered events raised by the L1Staking contract.
type L1StakingRegisteredIterator struct {
	Event *L1StakingRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1StakingRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1StakingRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1StakingRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1StakingRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1StakingRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1StakingRegistered represents a Registered event raised by the L1Staking contract.
type L1StakingRegistered struct {
	Addr   common.Address
	TmKey  [32]byte
	BlsKey []byte
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRegistered is a free log retrieval operation binding the contract event 0xb9c7babb56df9f2da4a30811a6c778e4e68af88b72712d56cf62c5516e20e199.
//
// Solidity: event Registered(address addr, bytes32 tmKey, bytes blsKey)
func (_L1Staking *L1StakingFilterer) FilterRegistered(opts *bind.FilterOpts) (*L1StakingRegisteredIterator, error) {

	logs, sub, err := _L1Staking.contract.FilterLogs(opts, "Registered")
	if err != nil {
		return nil, err
	}
	return &L1StakingRegisteredIterator{contract: _L1Staking.contract, event: "Registered", logs: logs, sub: sub}, nil
}

// WatchRegistered is a free log subscription operation binding the contract event 0xb9c7babb56df9f2da4a30811a6c778e4e68af88b72712d56cf62c5516e20e199.
//
// Solidity: event Registered(address addr, bytes32 tmKey, bytes blsKey)
func (_L1Staking *L1StakingFilterer) WatchRegistered(opts *bind.WatchOpts, sink chan<- *L1StakingRegistered) (event.Subscription, error) {

	logs, sub, err := _L1Staking.contract.WatchLogs(opts, "Registered")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1StakingRegistered)
				if err := _L1Staking.contract.UnpackLog(event, "Registered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRegistered is a log parse operation binding the contract event 0xb9c7babb56df9f2da4a30811a6c778e4e68af88b72712d56cf62c5516e20e199.
//
// Solidity: event Registered(address addr, bytes32 tmKey, bytes blsKey)
func (_L1Staking *L1StakingFilterer) ParseRegistered(log types.Log) (*L1StakingRegistered, error) {
	event := new(L1StakingRegistered)
	if err := _L1Staking.contract.UnpackLog(event, "Registered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L1StakingRewardPercentageUpdatedIterator is returned from FilterRewardPercentageUpdated and is used to iterate over the raw logs and unpacked data for RewardPercentageUpdated events raised by the L1Staking contract.
type L1StakingRewardPercentageUpdatedIterator struct {
	Event *L1StakingRewardPercentageUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1StakingRewardPercentageUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1StakingRewardPercentageUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1StakingRewardPercentageUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1StakingRewardPercentageUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1StakingRewardPercentageUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1StakingRewardPercentageUpdated represents a RewardPercentageUpdated event raised by the L1Staking contract.
type L1StakingRewardPercentageUpdated struct {
	OldPercentage *big.Int
	NewPercentage *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterRewardPercentageUpdated is a free log retrieval operation binding the contract event 0xa46de936426e045703b2d34a292a19fde92b329018db8e0da750033876b655ba.
//
// Solidity: event RewardPercentageUpdated(uint256 oldPercentage, uint256 newPercentage)
func (_L1Staking *L1StakingFilterer) FilterRewardPercentageUpdated(opts *bind.FilterOpts) (*L1StakingRewardPercentageUpdatedIterator, error) {

	logs, sub, err := _L1Staking.contract.FilterLogs(opts, "RewardPercentageUpdated")
	if err != nil {
		return nil, err
	}
	return &L1StakingRewardPercentageUpdatedIterator{contract: _L1Staking.contract, event: "RewardPercentageUpdated", logs: logs, sub: sub}, nil
}

// WatchRewardPercentageUpdated is a free log subscription operation binding the contract event 0xa46de936426e045703b2d34a292a19fde92b329018db8e0da750033876b655ba.
//
// Solidity: event RewardPercentageUpdated(uint256 oldPercentage, uint256 newPercentage)
func (_L1Staking *L1StakingFilterer) WatchRewardPercentageUpdated(opts *bind.WatchOpts, sink chan<- *L1StakingRewardPercentageUpdated) (event.Subscription, error) {

	logs, sub, err := _L1Staking.contract.WatchLogs(opts, "RewardPercentageUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1StakingRewardPercentageUpdated)
				if err := _L1Staking.contract.UnpackLog(event, "RewardPercentageUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRewardPercentageUpdated is a log parse operation binding the contract event 0xa46de936426e045703b2d34a292a19fde92b329018db8e0da750033876b655ba.
//
// Solidity: event RewardPercentageUpdated(uint256 oldPercentage, uint256 newPercentage)
func (_L1Staking *L1StakingFilterer) ParseRewardPercentageUpdated(log types.Log) (*L1StakingRewardPercentageUpdated, error) {
	event := new(L1StakingRewardPercentageUpdated)
	if err := _L1Staking.contract.UnpackLog(event, "RewardPercentageUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L1StakingSlashRemainingClaimedIterator is returned from FilterSlashRemainingClaimed and is used to iterate over the raw logs and unpacked data for SlashRemainingClaimed events raised by the L1Staking contract.
type L1StakingSlashRemainingClaimedIterator struct {
	Event *L1StakingSlashRemainingClaimed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1StakingSlashRemainingClaimedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1StakingSlashRemainingClaimed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1StakingSlashRemainingClaimed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1StakingSlashRemainingClaimedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1StakingSlashRemainingClaimedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1StakingSlashRemainingClaimed represents a SlashRemainingClaimed event raised by the L1Staking contract.
type L1StakingSlashRemainingClaimed struct {
	Receiver common.Address
	Amount   *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterSlashRemainingClaimed is a free log retrieval operation binding the contract event 0xa1fefb6c5328a92a416e321ed50997303fe7135fd88c28b0592b21ce42b5cdd9.
//
// Solidity: event SlashRemainingClaimed(address receiver, uint256 amount)
func (_L1Staking *L1StakingFilterer) FilterSlashRemainingClaimed(opts *bind.FilterOpts) (*L1StakingSlashRemainingClaimedIterator, error) {

	logs, sub, err := _L1Staking.contract.FilterLogs(opts, "SlashRemainingClaimed")
	if err != nil {
		return nil, err
	}
	return &L1StakingSlashRemainingClaimedIterator{contract: _L1Staking.contract, event: "SlashRemainingClaimed", logs: logs, sub: sub}, nil
}

// WatchSlashRemainingClaimed is a free log subscription operation binding the contract event 0xa1fefb6c5328a92a416e321ed50997303fe7135fd88c28b0592b21ce42b5cdd9.
//
// Solidity: event SlashRemainingClaimed(address receiver, uint256 amount)
func (_L1Staking *L1StakingFilterer) WatchSlashRemainingClaimed(opts *bind.WatchOpts, sink chan<- *L1StakingSlashRemainingClaimed) (event.Subscription, error) {

	logs, sub, err := _L1Staking.contract.WatchLogs(opts, "SlashRemainingClaimed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1StakingSlashRemainingClaimed)
				if err := _L1Staking.contract.UnpackLog(event, "SlashRemainingClaimed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSlashRemainingClaimed is a log parse operation binding the contract event 0xa1fefb6c5328a92a416e321ed50997303fe7135fd88c28b0592b21ce42b5cdd9.
//
// Solidity: event SlashRemainingClaimed(address receiver, uint256 amount)
func (_L1Staking *L1StakingFilterer) ParseSlashRemainingClaimed(log types.Log) (*L1StakingSlashRemainingClaimed, error) {
	event := new(L1StakingSlashRemainingClaimed)
	if err := _L1Staking.contract.UnpackLog(event, "SlashRemainingClaimed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L1StakingSlashedIterator is returned from FilterSlashed and is used to iterate over the raw logs and unpacked data for Slashed events raised by the L1Staking contract.
type L1StakingSlashedIterator struct {
	Event *L1StakingSlashed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1StakingSlashedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1StakingSlashed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1StakingSlashed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1StakingSlashedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1StakingSlashedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1StakingSlashed represents a Slashed event raised by the L1Staking contract.
type L1StakingSlashed struct {
	Stakers []common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterSlashed is a free log retrieval operation binding the contract event 0x654f4a61849f1b3ad10abb283d27f02d5fece7b820acc5a3b874713b58748b5a.
//
// Solidity: event Slashed(address[] stakers)
func (_L1Staking *L1StakingFilterer) FilterSlashed(opts *bind.FilterOpts) (*L1StakingSlashedIterator, error) {

	logs, sub, err := _L1Staking.contract.FilterLogs(opts, "Slashed")
	if err != nil {
		return nil, err
	}
	return &L1StakingSlashedIterator{contract: _L1Staking.contract, event: "Slashed", logs: logs, sub: sub}, nil
}

// WatchSlashed is a free log subscription operation binding the contract event 0x654f4a61849f1b3ad10abb283d27f02d5fece7b820acc5a3b874713b58748b5a.
//
// Solidity: event Slashed(address[] stakers)
func (_L1Staking *L1StakingFilterer) WatchSlashed(opts *bind.WatchOpts, sink chan<- *L1StakingSlashed) (event.Subscription, error) {

	logs, sub, err := _L1Staking.contract.WatchLogs(opts, "Slashed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1StakingSlashed)
				if err := _L1Staking.contract.UnpackLog(event, "Slashed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSlashed is a log parse operation binding the contract event 0x654f4a61849f1b3ad10abb283d27f02d5fece7b820acc5a3b874713b58748b5a.
//
// Solidity: event Slashed(address[] stakers)
func (_L1Staking *L1StakingFilterer) ParseSlashed(log types.Log) (*L1StakingSlashed, error) {
	event := new(L1StakingSlashed)
	if err := _L1Staking.contract.UnpackLog(event, "Slashed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L1StakingStakersRemovedIterator is returned from FilterStakersRemoved and is used to iterate over the raw logs and unpacked data for StakersRemoved events raised by the L1Staking contract.
type L1StakingStakersRemovedIterator struct {
	Event *L1StakingStakersRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1StakingStakersRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1StakingStakersRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1StakingStakersRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1StakingStakersRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1StakingStakersRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1StakingStakersRemoved represents a StakersRemoved event raised by the L1Staking contract.
type L1StakingStakersRemoved struct {
	Stakers []common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterStakersRemoved is a free log retrieval operation binding the contract event 0x3f446646c03e618be8238a586960d6d625f35c653cdca1ef59609993e8ed2c84.
//
// Solidity: event StakersRemoved(address[] stakers)
func (_L1Staking *L1StakingFilterer) FilterStakersRemoved(opts *bind.FilterOpts) (*L1StakingStakersRemovedIterator, error) {

	logs, sub, err := _L1Staking.contract.FilterLogs(opts, "StakersRemoved")
	if err != nil {
		return nil, err
	}
	return &L1StakingStakersRemovedIterator{contract: _L1Staking.contract, event: "StakersRemoved", logs: logs, sub: sub}, nil
}

// WatchStakersRemoved is a free log subscription operation binding the contract event 0x3f446646c03e618be8238a586960d6d625f35c653cdca1ef59609993e8ed2c84.
//
// Solidity: event StakersRemoved(address[] stakers)
func (_L1Staking *L1StakingFilterer) WatchStakersRemoved(opts *bind.WatchOpts, sink chan<- *L1StakingStakersRemoved) (event.Subscription, error) {

	logs, sub, err := _L1Staking.contract.WatchLogs(opts, "StakersRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1StakingStakersRemoved)
				if err := _L1Staking.contract.UnpackLog(event, "StakersRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStakersRemoved is a log parse operation binding the contract event 0x3f446646c03e618be8238a586960d6d625f35c653cdca1ef59609993e8ed2c84.
//
// Solidity: event StakersRemoved(address[] stakers)
func (_L1Staking *L1StakingFilterer) ParseStakersRemoved(log types.Log) (*L1StakingStakersRemoved, error) {
	event := new(L1StakingStakersRemoved)
	if err := _L1Staking.contract.UnpackLog(event, "StakersRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L1StakingStakingValueUpdatedIterator is returned from FilterStakingValueUpdated and is used to iterate over the raw logs and unpacked data for StakingValueUpdated events raised by the L1Staking contract.
type L1StakingStakingValueUpdatedIterator struct {
	Event *L1StakingStakingValueUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1StakingStakingValueUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1StakingStakingValueUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1StakingStakingValueUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1StakingStakingValueUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1StakingStakingValueUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1StakingStakingValueUpdated represents a StakingValueUpdated event raised by the L1Staking contract.
type L1StakingStakingValueUpdated struct {
	OldStakingValue *big.Int
	NewStakingValue *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterStakingValueUpdated is a free log retrieval operation binding the contract event 0x91e3ed304d49776a78bbe0df6bf7156f5433763621e5e728a3c2adfe7de74368.
//
// Solidity: event StakingValueUpdated(uint256 oldStakingValue, uint256 newStakingValue)
func (_L1Staking *L1StakingFilterer) FilterStakingValueUpdated(opts *bind.FilterOpts) (*L1StakingStakingValueUpdatedIterator, error) {

	logs, sub, err := _L1Staking.contract.FilterLogs(opts, "StakingValueUpdated")
	if err != nil {
		return nil, err
	}
	return &L1StakingStakingValueUpdatedIterator{contract: _L1Staking.contract, event: "StakingValueUpdated", logs: logs, sub: sub}, nil
}

// WatchStakingValueUpdated is a free log subscription operation binding the contract event 0x91e3ed304d49776a78bbe0df6bf7156f5433763621e5e728a3c2adfe7de74368.
//
// Solidity: event StakingValueUpdated(uint256 oldStakingValue, uint256 newStakingValue)
func (_L1Staking *L1StakingFilterer) WatchStakingValueUpdated(opts *bind.WatchOpts, sink chan<- *L1StakingStakingValueUpdated) (event.Subscription, error) {

	logs, sub, err := _L1Staking.contract.WatchLogs(opts, "StakingValueUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1StakingStakingValueUpdated)
				if err := _L1Staking.contract.UnpackLog(event, "StakingValueUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStakingValueUpdated is a log parse operation binding the contract event 0x91e3ed304d49776a78bbe0df6bf7156f5433763621e5e728a3c2adfe7de74368.
//
// Solidity: event StakingValueUpdated(uint256 oldStakingValue, uint256 newStakingValue)
func (_L1Staking *L1StakingFilterer) ParseStakingValueUpdated(log types.Log) (*L1StakingStakingValueUpdated, error) {
	event := new(L1StakingStakingValueUpdated)
	if err := _L1Staking.contract.UnpackLog(event, "StakingValueUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L1StakingWhitelistUpdatedIterator is returned from FilterWhitelistUpdated and is used to iterate over the raw logs and unpacked data for WhitelistUpdated events raised by the L1Staking contract.
type L1StakingWhitelistUpdatedIterator struct {
	Event *L1StakingWhitelistUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1StakingWhitelistUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1StakingWhitelistUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1StakingWhitelistUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1StakingWhitelistUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1StakingWhitelistUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1StakingWhitelistUpdated represents a WhitelistUpdated event raised by the L1Staking contract.
type L1StakingWhitelistUpdated struct {
	Add    []common.Address
	Remove []common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterWhitelistUpdated is a free log retrieval operation binding the contract event 0xe375867e538b40218c1b3db2ccceaf875eb073e38b510449e6088c1539ac8622.
//
// Solidity: event WhitelistUpdated(address[] add, address[] remove)
func (_L1Staking *L1StakingFilterer) FilterWhitelistUpdated(opts *bind.FilterOpts) (*L1StakingWhitelistUpdatedIterator, error) {

	logs, sub, err := _L1Staking.contract.FilterLogs(opts, "WhitelistUpdated")
	if err != nil {
		return nil, err
	}
	return &L1StakingWhitelistUpdatedIterator{contract: _L1Staking.contract, event: "WhitelistUpdated", logs: logs, sub: sub}, nil
}

// WatchWhitelistUpdated is a free log subscription operation binding the contract event 0xe375867e538b40218c1b3db2ccceaf875eb073e38b510449e6088c1539ac8622.
//
// Solidity: event WhitelistUpdated(address[] add, address[] remove)
func (_L1Staking *L1StakingFilterer) WatchWhitelistUpdated(opts *bind.WatchOpts, sink chan<- *L1StakingWhitelistUpdated) (event.Subscription, error) {

	logs, sub, err := _L1Staking.contract.WatchLogs(opts, "WhitelistUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1StakingWhitelistUpdated)
				if err := _L1Staking.contract.UnpackLog(event, "WhitelistUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWhitelistUpdated is a log parse operation binding the contract event 0xe375867e538b40218c1b3db2ccceaf875eb073e38b510449e6088c1539ac8622.
//
// Solidity: event WhitelistUpdated(address[] add, address[] remove)
func (_L1Staking *L1StakingFilterer) ParseWhitelistUpdated(log types.Log) (*L1StakingWhitelistUpdated, error) {
	event := new(L1StakingWhitelistUpdated)
	if err := _L1Staking.contract.UnpackLog(event, "WhitelistUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L1StakingWithdrawnIterator is returned from FilterWithdrawn and is used to iterate over the raw logs and unpacked data for Withdrawn events raised by the L1Staking contract.
type L1StakingWithdrawnIterator struct {
	Event *L1StakingWithdrawn // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1StakingWithdrawnIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1StakingWithdrawn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1StakingWithdrawn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1StakingWithdrawnIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1StakingWithdrawnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1StakingWithdrawn represents a Withdrawn event raised by the L1Staking contract.
type L1StakingWithdrawn struct {
	Addr         common.Address
	UnlockHeight *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterWithdrawn is a free log retrieval operation binding the contract event 0x7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5.
//
// Solidity: event Withdrawn(address indexed addr, uint256 unlockHeight)
func (_L1Staking *L1StakingFilterer) FilterWithdrawn(opts *bind.FilterOpts, addr []common.Address) (*L1StakingWithdrawnIterator, error) {

	var addrRule []interface{}
	for _, addrItem := range addr {
		addrRule = append(addrRule, addrItem)
	}

	logs, sub, err := _L1Staking.contract.FilterLogs(opts, "Withdrawn", addrRule)
	if err != nil {
		return nil, err
	}
	return &L1StakingWithdrawnIterator{contract: _L1Staking.contract, event: "Withdrawn", logs: logs, sub: sub}, nil
}

// WatchWithdrawn is a free log subscription operation binding the contract event 0x7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5.
//
// Solidity: event Withdrawn(address indexed addr, uint256 unlockHeight)
func (_L1Staking *L1StakingFilterer) WatchWithdrawn(opts *bind.WatchOpts, sink chan<- *L1StakingWithdrawn, addr []common.Address) (event.Subscription, error) {

	var addrRule []interface{}
	for _, addrItem := range addr {
		addrRule = append(addrRule, addrItem)
	}

	logs, sub, err := _L1Staking.contract.WatchLogs(opts, "Withdrawn", addrRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1StakingWithdrawn)
				if err := _L1Staking.contract.UnpackLog(event, "Withdrawn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawn is a log parse operation binding the contract event 0x7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5.
//
// Solidity: event Withdrawn(address indexed addr, uint256 unlockHeight)
func (_L1Staking *L1StakingFilterer) ParseWithdrawn(log types.Log) (*L1StakingWithdrawn, error) {
	event := new(L1StakingWithdrawn)
	if err := _L1Staking.contract.UnpackLog(event, "Withdrawn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
